{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "import lxml.html as lh\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "import time\n",
    "import geopandas as gpd\n",
    "import shapely\n",
    "from shapely.geometry import shape,mapping, Point, Polygon, MultiPolygon\n",
    "\n",
    "\n",
    "pd.options.display.max_rows = 999\n",
    "pd.set_option('display.max_rows', 200)\n",
    "\n",
    "# file_path = '/Users/j5/Documents/repo/covid/'\n",
    "# file_path = '/Users/J3/Downloads/repo/covid/'\n",
    "output_file_path = '/Users/J3/Downloads/repo/covid/output_files/'\n",
    "input_file_path = '/Users/J3/Downloads/repo/covid/input_files/'\n",
    "file_path_shp = '/Users/J3/Downloads/repo/covid/la-county-regions-current/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_names = ['u', 'ds']\n",
    "ul = pd.read_csv(input_file_path+\"url_list.csv\"\n",
    "                 , skiprows = 1\n",
    "                 , names = column_names\n",
    "                )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_names = ['neighborhood', 'lat', 'long']\n",
    "lat_long = pd.read_csv(input_file_path+\"covid Los Angeles 20200318 - city_lat_long_b.csv\"\n",
    "\n",
    "                 , skiprows = 1\n",
    "                 , names = column_names\n",
    "                )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_names = ['neighborhood','current_cases','lat', 'long', 'ds']\n",
    "df_old = pd.read_csv(input_file_path+\"covid Los Angeles 20200318 - LA_by_community_2020509.csv\"\n",
    "\n",
    "                 , skiprows = 1\n",
    "                 , names = column_names\n",
    "                )\n",
    "df_old['ds'] = pd.to_datetime(df_old['ds'])\n",
    "df_old = df_old[df_old['ds'] < '2020-03-30']\n",
    "df_old[df_old['current_cases'] > 0]\n",
    "df_old = df_old[~df_old['neighborhood'].str.lower().str.contains('invest')]\n",
    "df_old = df_old.drop(['lat', 'long'],1)\n",
    "\n",
    "# pd.pivot_table(df_old, index = ['ds'], aggfunc=len)\n",
    "#remove under investigation\n",
    "#greater than 0 \n",
    "#before 3/30\n",
    "#remove lat / long"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2370\n",
      "2020-05-11\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2369&row=25&start=1\n",
      "2020-05-10\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2367&row=25&start=1\n",
      "2020-05-09\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2365&row=25&start=1\n",
      "2020-05-08\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2362&row=25&start=1\n",
      "2020-05-07\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2361&row=25&start=1\n",
      "2020-05-06\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2359&row=25&start=1\n",
      "2020-05-05\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2357&row=25&start=1\n",
      "2020-05-04\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2356\n",
      "2020-05-03\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2353\n",
      "2020-05-01\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2352\n",
      "2020-04-30\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2349\n",
      "2020-04-29\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2347\n",
      "2020-04-28\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2345\n",
      "2020-04-27\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2343&row=25&start=1\n",
      "2020-04-26\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2341\n",
      "2020-04-25\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2337\n",
      "2020-04-24\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2336&row=25&start=1\n",
      "2020-04-23\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2333\n",
      "2020-04-22\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2331&row=25&start=1\n",
      "2020-04-21\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2329\n",
      "2020-04-20\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2326\n",
      "2020-04-19\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2325\n",
      "2020-04-18\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2323\n",
      "2020-04-17\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2321\n",
      "2020-04-16\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2319\n",
      "2020-04-15\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2317\n",
      "2020-04-14\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2314\n",
      "2020-04-13\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2312\n",
      "2020-04-12\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2311\n",
      "2020-04-11\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2309\n",
      "2020-04-10\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2307\n",
      "2020-04-09\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2305\n",
      "2020-04-08\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2302\n",
      "2020-04-07\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2300\n",
      "2020-04-06\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2298\n",
      "2020-04-05\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2297\n",
      "2020-04-04\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2294&row=\n",
      "2020-04-03\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2292&row=25&start=1\n",
      "2020-04-02\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2291&row=25&start=1\n",
      "2020-04-01\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2290\n",
      "2020-03-31\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2289\n",
      "2020-03-30\n",
      "       index                A      B       D         ds\n",
      "0          0            Acton    8.0  100.36 2020-05-11\n",
      "1          1  Adams-Normandie   33.0  402.34 2020-05-11\n",
      "2          2     Agoura Hills   31.0  148.45 2020-05-11\n",
      "3          3       Agua Dulce    3.0   72.15 2020-05-11\n",
      "4          4         Alhambra  120.0  138.37 2020-05-11\n",
      "...      ...              ...    ...     ...        ...\n",
      "13486      3         Pasadena   33.0     NaN 2020-04-01\n",
      "13487      2       Long Beach  115.0     NaN 2020-03-31\n",
      "13488      3         Pasadena   25.0     NaN 2020-03-31\n",
      "13489      1       Long Beach   99.0     NaN 2020-03-30\n",
      "13490      2         Pasadena   10.0     NaN 2020-03-30\n",
      "\n",
      "[13491 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "appended_data_list = []\n",
    "appended_data_list_b = []\n",
    "#df = pd.DataFrame([])\n",
    "\n",
    "# for i, row in ul[ul['ds'] >= '2020-03-30'].iterrows():\n",
    "for i, row in ul[(ul['ds'] <= '2020-05-11') & (ul['ds'] >= '2020-03-30') &(ul['ds'] != '2020-05-02') ].iterrows():\n",
    "    print(row['u'])\n",
    "    url = row['u']\n",
    "    print(row['ds'])\n",
    "    reqs = requests.get(url)\n",
    "    soup = BeautifulSoup(reqs.text, 'lxml')\n",
    "    soup.find_all(\"li\")\n",
    "    l = []\n",
    "    \n",
    "    for tag in soup.find_all(\"li\"):\n",
    "        l.append(tag.text)\n",
    "    \n",
    "    df=pd.DataFrame(l, columns = [\"name\"])\n",
    "    dfp=pd.DataFrame(l, columns = [\"name\"])\n",
    "    \n",
    "    dfp=dfp[dfp['name'].str.contains(\"Long Beach -- |Pasadena --\")]\n",
    "    dfp=dfp[~dfp['name'].str.contains(\"Avoid\")]\n",
    "    dfp['name'] = dfp['name'].str.replace('--', '\\t')\n",
    "    dfp[['A','B']]=dfp.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "    dfp[[\"B\"]] = dfp[[\"B\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "    dfp=dfp[['A','B']]\n",
    "    dfp['A'] = dfp['A'].str.strip()\n",
    "    dfp['ds'] = pd.to_datetime(row['ds'])\n",
    "    appended_data_list.append(dfp)\n",
    "    \n",
    "    df=df[df['name'].str.contains(\"Unincorporated -|City of|Los Angeles -\")]\n",
    "    df=df[~df['name'].str.contains(\"Avoid\")]\n",
    "    df = df[~df['name'].isin(['Pasadena', 'Long Beach'])]\n",
    "    df[['A','B','C','D','E','F']] = df.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "    df = df[['A','B','D']]\n",
    "    df['A'] = df['A'].str.replace('City of ', '')\n",
    "    df['A'] = df['A'].str.replace('Unincorporated - ', '')\n",
    "    df['A'] = df['A'].str.replace('Los Angeles - ', '')\n",
    "    df['A'] = df['A'].str.replace('*', '')\n",
    "    df['A'] = df['A'].str.strip()\n",
    "    df['B'] = df['B'].str.replace('--', '0')\n",
    "    df['D'] = df['D'].str.replace('--', '0')\n",
    "    df[[\"B\", \"D\"]] = df[[\"B\", \"D\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "    df=pd.pivot_table(df, index = [\"A\"], values = [\"B\",\"D\"], aggfunc={\"D\":np.max, \"B\":np.sum}).reset_index()    \n",
    "    df['ds'] = pd.to_datetime(row['ds'])\n",
    "    appended_data_list_b.append(df)\n",
    "    #time.sleep(1) # Sleep for 3 seconds\n",
    " \n",
    "df_final = pd.concat(appended_data_list_b)\n",
    "df_final\n",
    "dfp_final = pd.concat(appended_data_list)\n",
    "\n",
    "df_final=df_final.append(dfp_final).reset_index()\n",
    "print(df_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "#add 3 days ago\n",
    "index_names=df_final[ (df_final['A'] == 'Long Beach') & (df_final['B'] == 0) ].index\n",
    "df_final.drop(index_names , inplace=True)\n",
    "df_final_hold = df_final\n",
    "df_final.rename(columns={'A': 'neighborhood', 'B' : 'current_cases', 'D' : 'cases_per_100k'}, inplace=True)\n",
    "\n",
    "# print(df_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/J3/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "df_final = pd.concat([df_final, df_old])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pd.pivot_table(df_final, index = ['ds'], aggfunc=len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final['ds_3_days_ago'] = df_final['ds'] + pd.DateOffset(days = -3)\n",
    "df_final=pd.merge(df_final, df_final, how='left', left_on=['neighborhood','ds_3_days_ago'], right_on=['neighborhood','ds'])\n",
    "df_final['new_cases_last_3_days'] = df_final['current_cases_x'] - df_final['current_cases_y']\n",
    "df_final = df_final[['neighborhood', 'current_cases_x', 'cases_per_100k_x', 'ds_x', 'ds_3_days_ago_x', 'new_cases_last_3_days']]\n",
    "df_final.rename(columns={'ds_x':'ds', 'current_cases_x' : 'current_cases', 'cases_per_100k_x' : 'cases_per_100k', 'ds_3_days_ago_x': 'ds_3_days_ago'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_final=pd.merge(df_final, lat_long, left_on=  ['neighborhood'],\n",
    "#                    right_on= ['neighborhood'], \n",
    "#                    how = 'left')\n",
    "# print(df_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "# z=df_final['ds'].max().strftime(\"%Y%m%d\")\n",
    "# df_final=pd.merge(df_final, lat_long, left_on=  ['neighborhood'],\n",
    "#                    right_on= ['neighborhood'], \n",
    "#                    how = 'left')\n",
    "# df_final_latest = df_final[df_final['ds']==df_final['ds'].max()]\n",
    "# df_final_latest.to_csv('/Users/j5/Documents/repo/covid/covid_final_latest.csv')\n",
    "\n",
    "# df_final_earliest = df_final[df_final['ds']==df_final['ds'].min()]\n",
    "# df_final_earliest.to_csv('/Users/j5/Documents/repo/covid/covid_final_earliest.csv')\n",
    "# print(df_final)\n",
    "# df_final.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          neighborhood  current_cases  cases_per_100k         ds  \\\n",
      "0                Acton            8.0          100.36 2020-05-11   \n",
      "1      Adams-Normandie           33.0          402.34 2020-05-11   \n",
      "2         Agoura Hills           31.0          148.45 2020-05-11   \n",
      "3           Agua Dulce            3.0           72.15 2020-05-11   \n",
      "4             Alhambra          120.0          138.37 2020-05-11   \n",
      "...                ...            ...             ...        ...   \n",
      "14899   South Whittier            5.0             NaN 2020-03-29   \n",
      "14900      West Carson            7.0             NaN 2020-03-29   \n",
      "14901      Willowbrook            1.0             NaN 2020-03-29   \n",
      "14902       Long Beach           88.0             NaN 2020-03-29   \n",
      "14903         Pasadena           10.0             NaN 2020-03-29   \n",
      "\n",
      "      ds_3_days_ago  new_cases_last_3_days  \n",
      "0        2020-05-08                    0.0  \n",
      "1        2020-05-08                    1.0  \n",
      "2        2020-05-08                    0.0  \n",
      "3        2020-05-08                    1.0  \n",
      "4        2020-05-08                   10.0  \n",
      "...             ...                    ...  \n",
      "14899    2020-03-26                    1.0  \n",
      "14900    2020-03-26                    NaN  \n",
      "14901    2020-03-26                    0.0  \n",
      "14902    2020-03-26                   47.0  \n",
      "14903    2020-03-26                    1.0  \n",
      "\n",
      "[14904 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = gpd.read_file(file_path_shp+\"l.a. county region (current).shp\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          neighborhood  current_cases  cases_per_100k         ds  \\\n",
      "0                Acton            8.0          100.36 2020-05-11   \n",
      "1      Adams-Normandie           33.0          402.34 2020-05-11   \n",
      "2         Agoura Hills           31.0          148.45 2020-05-11   \n",
      "3           Agua Dulce            3.0           72.15 2020-05-11   \n",
      "4             Alhambra          120.0          138.37 2020-05-11   \n",
      "...                ...            ...             ...        ...   \n",
      "14899   South Whittier            5.0             NaN 2020-03-29   \n",
      "14900      West Carson            7.0             NaN 2020-03-29   \n",
      "14901      Willowbrook            1.0             NaN 2020-03-29   \n",
      "14902       Long Beach           88.0             NaN 2020-03-29   \n",
      "14903         Pasadena           10.0             NaN 2020-03-29   \n",
      "\n",
      "      ds_3_days_ago  new_cases_last_3_days      lat      long  \\\n",
      "0        2020-05-08                    0.0  34.4700 -118.1967   \n",
      "1        2020-05-08                    1.0  34.0343 -118.2993   \n",
      "2        2020-05-08                    0.0  34.1364 -118.7745   \n",
      "3        2020-05-08                    1.0      NaN       NaN   \n",
      "4        2020-05-08                   10.0  34.0953 -118.1270   \n",
      "...             ...                    ...      ...       ...   \n",
      "14899    2020-03-26                    1.0  33.9608 -118.0417   \n",
      "14900    2020-03-26                    NaN  33.8206 -118.2934   \n",
      "14901    2020-03-26                    0.0  33.9170 -118.2551   \n",
      "14902    2020-03-26                   47.0  33.7701 -118.1937   \n",
      "14903    2020-03-26                    1.0  34.1561 -118.1319   \n",
      "\n",
      "                       region  \n",
      "0             Antelope Valley  \n",
      "1                  South L.A.  \n",
      "2      Santa Monica Mountains  \n",
      "3                         NaN  \n",
      "4          San Gabriel Valley  \n",
      "...                       ...  \n",
      "14899      San Gabriel Valley  \n",
      "14900                  Harbor  \n",
      "14901              South L.A.  \n",
      "14902                  Harbor  \n",
      "14903                Verdugos  \n",
      "\n",
      "[14904 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "dfl = lat_long\n",
    "dfl[\"region\"] = \"\"\n",
    "for j, row in df2.iterrows():\n",
    "#     poly = df2.at[j,'geometry']\n",
    "#     print(df2.at[j,'name'])\n",
    "    for i, row in lat_long.iterrows():\n",
    "        if row['region']==\"\":\n",
    "            poly = df2.at[j,'geometry']\n",
    "            p1 = shapely.geometry.Point(row['long'],row['lat'])\n",
    "            dfl.at[i, 'region'] = np.where(poly.contains(p1) == True , df2.at[j,'name'], '')\n",
    "#             print(dfl)\n",
    "#     print(df2.at[j,'name'])\n",
    "\n",
    "# dfl = dfl.drop(['lat', 'long'],1)\n",
    "\n",
    "df_final = pd.merge(df_final, dfl, how='left', left_on=['neighborhood'], right_on=['neighborhood'])\n",
    "print(df_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "z=df_final['ds'].max().strftime(\"%Y%m%d\")\n",
    "# df_final=pd.merge(df_final, lat_long, left_on=  ['neighborhood'],\n",
    "#                    right_on= ['neighborhood'], \n",
    "#                    how = 'left')\n",
    "df_final_latest = df_final[df_final['ds']==df_final['ds'].max()]\n",
    "df_final_latest.to_csv(output_file_path+\"covid_final_latest.csv\")\n",
    "\n",
    "df_final_earliest = df_final[df_final['ds']==df_final['ds'].min()]\n",
    "df_final_earliest.to_csv(output_file_path+'covid_final_earliest.csv')\n",
    "# print(df_final)\n",
    "# df_final.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "#output missing lat and long\n",
    "file_name_m = 'missing_lat_long'\n",
    "z_m=df_final['ds'].max().strftime(\"%Y%m%d\")\n",
    "y_m=output_file_path + file_name_m + \"_\" + z_m + \".csv\"\n",
    "df_final[(df_final['ds']==df_final['ds'].max()) & (df_final['lat'].isnull()) & (df_final['current_cases']>0)].sort_values(['current_cases']).to_csv(y_m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/J3/Downloads/repo/covid/output_files/covid_final_20200511.csv\n"
     ]
    }
   ],
   "source": [
    "#output dfp_final\n",
    "\n",
    "file_name = 'covid_final'\n",
    "\n",
    "y=output_file_path + file_name + \"_\" + z + \".csv\"\n",
    "print(y)\n",
    "\n",
    "# df_final.to_csv('/Users/j5/Documents/repo/covid/covid_final.csv')\n",
    "df_final.to_csv(output_file_path+'covid_final.csv')\n",
    "df_final.to_csv(y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          neighborhood  current_cases  cases_per_100k         ds  \\\n",
      "0                Acton            8.0          100.36 2020-05-11   \n",
      "1      Adams-Normandie           33.0          402.34 2020-05-11   \n",
      "2         Agoura Hills           31.0          148.45 2020-05-11   \n",
      "3           Agua Dulce            3.0           72.15 2020-05-11   \n",
      "4             Alhambra          120.0          138.37 2020-05-11   \n",
      "...                ...            ...             ...        ...   \n",
      "14899   South Whittier            5.0             NaN 2020-03-29   \n",
      "14900      West Carson            7.0             NaN 2020-03-29   \n",
      "14901      Willowbrook            1.0             NaN 2020-03-29   \n",
      "14902       Long Beach           88.0             NaN 2020-03-29   \n",
      "14903         Pasadena           10.0             NaN 2020-03-29   \n",
      "\n",
      "      ds_3_days_ago  new_cases_last_3_days      lat      long  \\\n",
      "0        2020-05-08                    0.0  34.4700 -118.1967   \n",
      "1        2020-05-08                    1.0  34.0343 -118.2993   \n",
      "2        2020-05-08                    0.0  34.1364 -118.7745   \n",
      "3        2020-05-08                    1.0      NaN       NaN   \n",
      "4        2020-05-08                   10.0  34.0953 -118.1270   \n",
      "...             ...                    ...      ...       ...   \n",
      "14899    2020-03-26                    1.0  33.9608 -118.0417   \n",
      "14900    2020-03-26                    NaN  33.8206 -118.2934   \n",
      "14901    2020-03-26                    0.0  33.9170 -118.2551   \n",
      "14902    2020-03-26                   47.0  33.7701 -118.1937   \n",
      "14903    2020-03-26                    1.0  34.1561 -118.1319   \n",
      "\n",
      "                       region  \n",
      "0             Antelope Valley  \n",
      "1                  South L.A.  \n",
      "2      Santa Monica Mountains  \n",
      "3                         NaN  \n",
      "4          San Gabriel Valley  \n",
      "...                       ...  \n",
      "14899      San Gabriel Valley  \n",
      "14900                  Harbor  \n",
      "14901              South L.A.  \n",
      "14902                  Harbor  \n",
      "14903                Verdugos  \n",
      "\n",
      "[14904 rows x 9 columns]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "neighborhood                     object\n",
       "current_cases                   float64\n",
       "cases_per_100k                  float64\n",
       "ds                       datetime64[ns]\n",
       "ds_3_days_ago            datetime64[ns]\n",
       "new_cases_last_3_days           float64\n",
       "lat                             float64\n",
       "long                            float64\n",
       "region                           object\n",
       "dtype: object"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ended here 5/7/2020\n",
    "print(df_final)\n",
    "df_final.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "#output cases by region\n",
    "dfg = df_final\n",
    "dfg['region'] = pd.array(dfg['region'].tolist())\n",
    "df_final.dtypes\n",
    "dfg = pd.pivot_table(dfg, index = ['ds', 'region'], aggfunc = np.sum, values = 'current_cases').reset_index()\n",
    "dfg = dfg.sort_values(by=['region', 'ds'])\n",
    "dfg['new_cases'] = dfg.groupby(['region'])['current_cases'].diff().fillna(0)\n",
    "dfg['cases_7_day_avg'] = dfg.groupby('region')['new_cases'].transform(lambda x: x.rolling(7,7).mean()).round(2)\n",
    "# dfg.to_csv('/Users/J5/Downloads/dfg.csv')\n",
    "\n",
    "#filename\n",
    "file_name_g = 'covid_cases_by_region'\n",
    "z_g=dfg['ds'].max().strftime(\"%Y%m%d\")\n",
    "y_g=output_file_path + file_name_g + \"_\" + z_g + \".csv\"\n",
    "dfg.to_csv(y_g)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1f53abd0>"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "plt.figure(figsize=(20,6))\n",
    "sns.lineplot(data=dfg, x='ds', y='cases_7_day_avg', hue='region')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-03-18 00:00:00\n",
      "2020-05-10 00:00:00\n"
     ]
    }
   ],
   "source": [
    "#get historic data \n",
    "print(df_final['ds'].min())\n",
    "print(df_final['ds'].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'A'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-20-de57e783d81a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ds_3_days_ago'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ds'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDateOffset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mdf_final\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_final\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'left'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft_on\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'ds_3_days_ago'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright_on\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'ds'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'new_cases_last_3_days'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'B_x'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'B_y'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36mmerge\u001b[0;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m     79\u001b[0m         \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m         \u001b[0mindicator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindicator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 81\u001b[0;31m         \u001b[0mvalidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     82\u001b[0m     )\n\u001b[1;32m     83\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, left, right, how, on, left_on, right_on, axis, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m    624\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mright_join_keys\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    625\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin_names\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 626\u001b[0;31m         ) = self._get_merge_keys()\n\u001b[0m\u001b[1;32m    627\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    628\u001b[0m         \u001b[0;31m# validate the merge keys dtypes. We may need to coerce\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m_get_merge_keys\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    973\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_rkey\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    974\u001b[0m                         \u001b[0;32mif\u001b[0m \u001b[0mrk\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 975\u001b[0;31m                             \u001b[0mright_keys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label_or_level_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    976\u001b[0m                         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    977\u001b[0m                             \u001b[0;31m# work-around for merge_asof(right_index=True)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_get_label_or_level_values\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1772\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_level_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1773\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1774\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1775\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1776\u001b[0m         \u001b[0;31m# Check for duplicates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'A'"
     ]
    }
   ],
   "source": [
    "# df['x_DATE'] = df['DATE'] + pd.DateOffset(days=180)\n",
    "df_final_hold = df_final\n",
    "\n",
    "df_final['ds_3_days_ago'] = df_final['ds'] + pd.DateOffset(days = -3)\n",
    "\n",
    "df_final=pd.merge(df_final, df_final, how='left', left_on=['A','ds_3_days_ago'], right_on=['A','ds'])\n",
    "df_final['new_cases_last_3_days'] = df_final['B_x'] - df_final['B_y']\n",
    "\n",
    "print(df_final)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['A', 'D_x', 'B_x', 'ds_x'] not in index\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-21-7cc4e2ebb777>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#df_final = df_final_hold\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf_final\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'B_x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'D_x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ds_x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ds_3_days_ago_x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'new_cases_last_3_days'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'neighborhood'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ds_x'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'ds'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'B_x'\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0;34m'current_cases'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'D_x'\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0;34m'cases_per_100k'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2984\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2985\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2986\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_convert_to_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2987\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2988\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_convert_to_indexer\u001b[0;34m(self, obj, axis, is_setter, raise_missing)\u001b[0m\n\u001b[1;32m   1283\u001b[0m                 \u001b[0;31m# When setting, missing keys are not allowed, even with .loc:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1284\u001b[0m                 \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"raise_missing\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mTrue\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mis_setter\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1285\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1286\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1287\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1090\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1091\u001b[0m         self._validate_read_indexer(\n\u001b[0;32m-> 1092\u001b[0;31m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mraise_missing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1093\u001b[0m         )\n\u001b[1;32m   1094\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1183\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"loc\"\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1184\u001b[0m                 \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1185\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"{} not in index\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnot_found\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1187\u001b[0m             \u001b[0;31m# we skip the warning on Categorical/Interval\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['A', 'D_x', 'B_x', 'ds_x'] not in index\""
     ]
    }
   ],
   "source": [
    "#df_final = df_final_hold\n",
    "df_final = df_final[['A', 'B_x', 'D_x', 'ds_x', 'ds_3_days_ago_x', 'new_cases_last_3_days']]\n",
    "df_final.rename(columns={'A': 'neighborhood', 'ds_x':'ds', 'B_x' : 'current_cases', 'D_x' : 'cases_per_100k'}, inplace=True)\n",
    "df_final\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         neighborhood      lat      long\n",
      "0            Alhambra  34.0953 -118.1270\n",
      "1             Arcadia  34.1397 -118.0353\n",
      "2       Beverly Hills  34.0736 -118.4004\n",
      "3              Carson  33.8374 -118.2559\n",
      "4         Culver City  34.0211 -118.3965\n",
      "..                ...      ...       ...\n",
      "225  Rancho Dominguez  33.8508 -118.2249\n",
      "226   Reynier Village  34.0368 -118.3856\n",
      "227         Thai Town  34.1018 -118.3036\n",
      "228   Atwater Village  34.1173 -118.2614\n",
      "229       Rancho Park  34.0454  118.4207\n",
      "\n",
      "[230 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "column_names = ['neighborhood', 'lat', 'long']\n",
    "lat_long = pd.read_csv(\"/Users/J3/Downloads/covid_city_lat_long.csv\"\n",
    "                 , skiprows = 1\n",
    "                 , names = column_names\n",
    "                )\n",
    "print(lat_long)\n",
    "\n",
    "df_final=pd.merge(df_final, lat_long, left_on=  ['neighborhood'],\n",
    "                   right_on= ['neighborhood'], \n",
    "                   how = 'left')\n",
    "df_final_latest = df_final[df_final['ds']==df_final['ds'].max()]\n",
    "df_final_latest.to_csv('/Users/J3/Downloads/covid_final_latest.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>current_cases</th>\n",
       "      <th>cases_per_100k</th>\n",
       "      <th>ds</th>\n",
       "      <th>ds_3_days_ago_x</th>\n",
       "      <th>new_cases_last_3_days</th>\n",
       "      <th>lat_x</th>\n",
       "      <th>long_x</th>\n",
       "      <th>ds_3_days_ago</th>\n",
       "      <th>lat_y</th>\n",
       "      <th>long_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>204</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>107.0</td>\n",
       "      <td>155.76</td>\n",
       "      <td>2020-05-01</td>\n",
       "      <td>2020-04-28</td>\n",
       "      <td>4.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-28</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>523</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>106.0</td>\n",
       "      <td>154.30</td>\n",
       "      <td>2020-04-30</td>\n",
       "      <td>2020-04-27</td>\n",
       "      <td>4.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-27</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>842</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>106.0</td>\n",
       "      <td>154.30</td>\n",
       "      <td>2020-04-29</td>\n",
       "      <td>2020-04-26</td>\n",
       "      <td>7.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-26</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1161</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>103.0</td>\n",
       "      <td>149.93</td>\n",
       "      <td>2020-04-28</td>\n",
       "      <td>2020-04-25</td>\n",
       "      <td>5.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-25</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1480</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>102.0</td>\n",
       "      <td>148.48</td>\n",
       "      <td>2020-04-27</td>\n",
       "      <td>2020-04-24</td>\n",
       "      <td>7.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-24</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1798</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>99.0</td>\n",
       "      <td>144.11</td>\n",
       "      <td>2020-04-26</td>\n",
       "      <td>2020-04-23</td>\n",
       "      <td>4.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-23</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2117</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>98.0</td>\n",
       "      <td>142.66</td>\n",
       "      <td>2020-04-25</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>4.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2436</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>95.0</td>\n",
       "      <td>138.29</td>\n",
       "      <td>2020-04-24</td>\n",
       "      <td>2020-04-21</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-21</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2755</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>95.0</td>\n",
       "      <td>138.29</td>\n",
       "      <td>2020-04-23</td>\n",
       "      <td>2020-04-20</td>\n",
       "      <td>4.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-20</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3073</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>94.0</td>\n",
       "      <td>136.83</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>2020-04-19</td>\n",
       "      <td>9.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-19</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3391</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>94.0</td>\n",
       "      <td>136.83</td>\n",
       "      <td>2020-04-21</td>\n",
       "      <td>2020-04-18</td>\n",
       "      <td>9.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-18</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3710</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>91.0</td>\n",
       "      <td>132.47</td>\n",
       "      <td>2020-04-20</td>\n",
       "      <td>2020-04-17</td>\n",
       "      <td>7.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-17</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4029</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>85.0</td>\n",
       "      <td>123.73</td>\n",
       "      <td>2020-04-19</td>\n",
       "      <td>2020-04-16</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-16</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4348</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>85.0</td>\n",
       "      <td>123.73</td>\n",
       "      <td>2020-04-18</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4667</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>84.0</td>\n",
       "      <td>122.28</td>\n",
       "      <td>2020-04-17</td>\n",
       "      <td>2020-04-14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-14</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4986</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>84.0</td>\n",
       "      <td>122.28</td>\n",
       "      <td>2020-04-16</td>\n",
       "      <td>2020-04-13</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-13</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5305</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>84.0</td>\n",
       "      <td>122.28</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>2020-04-12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-12</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5624</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>84.0</td>\n",
       "      <td>122.28</td>\n",
       "      <td>2020-04-14</td>\n",
       "      <td>2020-04-11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-11</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5943</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>85.0</td>\n",
       "      <td>123.73</td>\n",
       "      <td>2020-04-13</td>\n",
       "      <td>2020-04-10</td>\n",
       "      <td>4.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-10</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6262</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>84.0</td>\n",
       "      <td>122.28</td>\n",
       "      <td>2020-04-12</td>\n",
       "      <td>2020-04-09</td>\n",
       "      <td>6.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-09</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6581</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>83.0</td>\n",
       "      <td>120.82</td>\n",
       "      <td>2020-04-11</td>\n",
       "      <td>2020-04-08</td>\n",
       "      <td>10.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-08</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6900</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>81.0</td>\n",
       "      <td>117.91</td>\n",
       "      <td>2020-04-10</td>\n",
       "      <td>2020-04-07</td>\n",
       "      <td>13.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-07</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7219</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>78.0</td>\n",
       "      <td>113.54</td>\n",
       "      <td>2020-04-09</td>\n",
       "      <td>2020-04-06</td>\n",
       "      <td>11.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-06</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7538</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>73.0</td>\n",
       "      <td>106.26</td>\n",
       "      <td>2020-04-08</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>9.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7858</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>68.0</td>\n",
       "      <td>98.10</td>\n",
       "      <td>2020-04-07</td>\n",
       "      <td>2020-04-04</td>\n",
       "      <td>6.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-04</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8178</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>67.0</td>\n",
       "      <td>96.66</td>\n",
       "      <td>2020-04-06</td>\n",
       "      <td>2020-04-03</td>\n",
       "      <td>7.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-03</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8498</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>64.0</td>\n",
       "      <td>92.33</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>2020-04-02</td>\n",
       "      <td>10.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-02</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8818</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>62.0</td>\n",
       "      <td>89.45</td>\n",
       "      <td>2020-04-04</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>12.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9138</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>60.0</td>\n",
       "      <td>86.56</td>\n",
       "      <td>2020-04-03</td>\n",
       "      <td>2020-03-31</td>\n",
       "      <td>21.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-03-31</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9458</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>54.0</td>\n",
       "      <td>77.90</td>\n",
       "      <td>2020-04-02</td>\n",
       "      <td>2020-03-30</td>\n",
       "      <td>20.0</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-03-30</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9778</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>50.0</td>\n",
       "      <td>72.13</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>2020-03-29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-03-29</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10099</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>39.0</td>\n",
       "      <td>56.26</td>\n",
       "      <td>2020-03-31</td>\n",
       "      <td>2020-03-28</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-03-28</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10420</td>\n",
       "      <td>Redondo Beach</td>\n",
       "      <td>34.0</td>\n",
       "      <td>49.05</td>\n",
       "      <td>2020-03-30</td>\n",
       "      <td>2020-03-27</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "      <td>2020-03-27</td>\n",
       "      <td>33.8492</td>\n",
       "      <td>-118.3884</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        neighborhood  current_cases  cases_per_100k         ds  \\\n",
       "204    Redondo Beach          107.0          155.76 2020-05-01   \n",
       "523    Redondo Beach          106.0          154.30 2020-04-30   \n",
       "842    Redondo Beach          106.0          154.30 2020-04-29   \n",
       "1161   Redondo Beach          103.0          149.93 2020-04-28   \n",
       "1480   Redondo Beach          102.0          148.48 2020-04-27   \n",
       "1798   Redondo Beach           99.0          144.11 2020-04-26   \n",
       "2117   Redondo Beach           98.0          142.66 2020-04-25   \n",
       "2436   Redondo Beach           95.0          138.29 2020-04-24   \n",
       "2755   Redondo Beach           95.0          138.29 2020-04-23   \n",
       "3073   Redondo Beach           94.0          136.83 2020-04-22   \n",
       "3391   Redondo Beach           94.0          136.83 2020-04-21   \n",
       "3710   Redondo Beach           91.0          132.47 2020-04-20   \n",
       "4029   Redondo Beach           85.0          123.73 2020-04-19   \n",
       "4348   Redondo Beach           85.0          123.73 2020-04-18   \n",
       "4667   Redondo Beach           84.0          122.28 2020-04-17   \n",
       "4986   Redondo Beach           84.0          122.28 2020-04-16   \n",
       "5305   Redondo Beach           84.0          122.28 2020-04-15   \n",
       "5624   Redondo Beach           84.0          122.28 2020-04-14   \n",
       "5943   Redondo Beach           85.0          123.73 2020-04-13   \n",
       "6262   Redondo Beach           84.0          122.28 2020-04-12   \n",
       "6581   Redondo Beach           83.0          120.82 2020-04-11   \n",
       "6900   Redondo Beach           81.0          117.91 2020-04-10   \n",
       "7219   Redondo Beach           78.0          113.54 2020-04-09   \n",
       "7538   Redondo Beach           73.0          106.26 2020-04-08   \n",
       "7858   Redondo Beach           68.0           98.10 2020-04-07   \n",
       "8178   Redondo Beach           67.0           96.66 2020-04-06   \n",
       "8498   Redondo Beach           64.0           92.33 2020-04-05   \n",
       "8818   Redondo Beach           62.0           89.45 2020-04-04   \n",
       "9138   Redondo Beach           60.0           86.56 2020-04-03   \n",
       "9458   Redondo Beach           54.0           77.90 2020-04-02   \n",
       "9778   Redondo Beach           50.0           72.13 2020-04-01   \n",
       "10099  Redondo Beach           39.0           56.26 2020-03-31   \n",
       "10420  Redondo Beach           34.0           49.05 2020-03-30   \n",
       "\n",
       "      ds_3_days_ago_x  new_cases_last_3_days    lat_x    long_x ds_3_days_ago  \\\n",
       "204        2020-04-28                    4.0  33.8492 -118.3884    2020-04-28   \n",
       "523        2020-04-27                    4.0  33.8492 -118.3884    2020-04-27   \n",
       "842        2020-04-26                    7.0  33.8492 -118.3884    2020-04-26   \n",
       "1161       2020-04-25                    5.0  33.8492 -118.3884    2020-04-25   \n",
       "1480       2020-04-24                    7.0  33.8492 -118.3884    2020-04-24   \n",
       "1798       2020-04-23                    4.0  33.8492 -118.3884    2020-04-23   \n",
       "2117       2020-04-22                    4.0  33.8492 -118.3884    2020-04-22   \n",
       "2436       2020-04-21                    1.0  33.8492 -118.3884    2020-04-21   \n",
       "2755       2020-04-20                    4.0  33.8492 -118.3884    2020-04-20   \n",
       "3073       2020-04-19                    9.0  33.8492 -118.3884    2020-04-19   \n",
       "3391       2020-04-18                    9.0  33.8492 -118.3884    2020-04-18   \n",
       "3710       2020-04-17                    7.0  33.8492 -118.3884    2020-04-17   \n",
       "4029       2020-04-16                    1.0  33.8492 -118.3884    2020-04-16   \n",
       "4348       2020-04-15                    1.0  33.8492 -118.3884    2020-04-15   \n",
       "4667       2020-04-14                    0.0  33.8492 -118.3884    2020-04-14   \n",
       "4986       2020-04-13                   -1.0  33.8492 -118.3884    2020-04-13   \n",
       "5305       2020-04-12                    0.0  33.8492 -118.3884    2020-04-12   \n",
       "5624       2020-04-11                    1.0  33.8492 -118.3884    2020-04-11   \n",
       "5943       2020-04-10                    4.0  33.8492 -118.3884    2020-04-10   \n",
       "6262       2020-04-09                    6.0  33.8492 -118.3884    2020-04-09   \n",
       "6581       2020-04-08                   10.0  33.8492 -118.3884    2020-04-08   \n",
       "6900       2020-04-07                   13.0  33.8492 -118.3884    2020-04-07   \n",
       "7219       2020-04-06                   11.0  33.8492 -118.3884    2020-04-06   \n",
       "7538       2020-04-05                    9.0  33.8492 -118.3884    2020-04-05   \n",
       "7858       2020-04-04                    6.0  33.8492 -118.3884    2020-04-04   \n",
       "8178       2020-04-03                    7.0  33.8492 -118.3884    2020-04-03   \n",
       "8498       2020-04-02                   10.0  33.8492 -118.3884    2020-04-02   \n",
       "8818       2020-04-01                   12.0  33.8492 -118.3884    2020-04-01   \n",
       "9138       2020-03-31                   21.0  33.8492 -118.3884    2020-03-31   \n",
       "9458       2020-03-30                   20.0  33.8492 -118.3884    2020-03-30   \n",
       "9778       2020-03-29                    NaN  33.8492 -118.3884    2020-03-29   \n",
       "10099      2020-03-28                    NaN  33.8492 -118.3884    2020-03-28   \n",
       "10420      2020-03-27                    NaN  33.8492 -118.3884    2020-03-27   \n",
       "\n",
       "         lat_y    long_y  \n",
       "204    33.8492 -118.3884  \n",
       "523    33.8492 -118.3884  \n",
       "842    33.8492 -118.3884  \n",
       "1161   33.8492 -118.3884  \n",
       "1480   33.8492 -118.3884  \n",
       "1798   33.8492 -118.3884  \n",
       "2117   33.8492 -118.3884  \n",
       "2436   33.8492 -118.3884  \n",
       "2755   33.8492 -118.3884  \n",
       "3073   33.8492 -118.3884  \n",
       "3391   33.8492 -118.3884  \n",
       "3710   33.8492 -118.3884  \n",
       "4029   33.8492 -118.3884  \n",
       "4348   33.8492 -118.3884  \n",
       "4667   33.8492 -118.3884  \n",
       "4986   33.8492 -118.3884  \n",
       "5305   33.8492 -118.3884  \n",
       "5624   33.8492 -118.3884  \n",
       "5943   33.8492 -118.3884  \n",
       "6262   33.8492 -118.3884  \n",
       "6581   33.8492 -118.3884  \n",
       "6900   33.8492 -118.3884  \n",
       "7219   33.8492 -118.3884  \n",
       "7538   33.8492 -118.3884  \n",
       "7858   33.8492 -118.3884  \n",
       "8178   33.8492 -118.3884  \n",
       "8498   33.8492 -118.3884  \n",
       "8818   33.8492 -118.3884  \n",
       "9138   33.8492 -118.3884  \n",
       "9458   33.8492 -118.3884  \n",
       "9778   33.8492 -118.3884  \n",
       "10099  33.8492 -118.3884  \n",
       "10420  33.8492 -118.3884  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final.loc[df_final['neighborhood'] == 'Redondo Beach'].sort_values([\"ds\"], ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2020-05-01 00:00:00')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final['ds'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final_latest = df_final[df_final['ds']==df_final['ds'].max()]\n",
    "df_final_latest.to_csv('/Users/J3/Downloads/covid_final_latest.csv')\n",
    "#df.to_html('filename.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final_latest_html = df_final_latest[['neighborhood', 'current_cases', 'new_cases_last_3_days', 'ds']]\n",
    "df_final_latest_html=df_final_latest_html.sort_values([\"new_cases_last_3_days\", \"current_cases\"], ascending = False)\n",
    "df_final_latest_html\n",
    "df_final_latest_html.to_html('/Users/J3/Downloads/covid_final_latest_table.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "neighborhood                     object\n",
       "current_cases                   float64\n",
       "cases_per_100k                  float64\n",
       "ds                       datetime64[ns]\n",
       "ds_3_days_ago_x          datetime64[ns]\n",
       "new_cases_last_3_days           float64\n",
       "lat_x                           float64\n",
       "long_x                          float64\n",
       "ds_3_days_ago            datetime64[ns]\n",
       "lat_y                           float64\n",
       "long_y                          float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final_latest.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final.to_csv('/Users/J3/Downloads/covid_final.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2337\n",
      "                       A       B         ds\n",
      "27   Hospitalized (Ever)  4211   2020-04-24\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2336\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Columns must be same length as key",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-36-576b21608174>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m     \u001b[0mdfh\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdfh\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdfh\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'name'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontains\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Hospital\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m     \u001b[0mdfh\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'B'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdfh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\t\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m     \u001b[0mdfp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"B\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdfp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"B\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numeric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'coerce'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m     \u001b[0mdfh\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdfh\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'B'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__setitem__\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   3467\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setitem_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3468\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3469\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setitem_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3470\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3471\u001b[0m             \u001b[0;31m# set column\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_setitem_array\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   3490\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3491\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3492\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Columns must be same length as key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3493\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0mk1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk2\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3494\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Columns must be same length as key"
     ]
    }
   ],
   "source": [
    "column_names = ['u', 'ds']\n",
    "ul = pd.read_csv(\"/Users/J3/Downloads/url_list.csv\"\n",
    "                 , skiprows = 1\n",
    "                 , names = column_names\n",
    "                )\n",
    "\n",
    "#notes\n",
    "#df['Date'] = pandas.to_datetime(df['Date'])\n",
    "#cols = ['A', 'B', 'ds']\n",
    "\n",
    "#appended_data = pd.DataFrame(columns= cols)\n",
    "# appended_data_list = []\n",
    "# appended_data_list_b = []\n",
    "appended_data_list_h = []\n",
    "#df = pd.DataFrame([])\n",
    "\n",
    "for i, row in ul[ul['ds'] >= '2020-03-21'].iterrows():\n",
    "    print(row['u'])\n",
    "    url = row['u']\n",
    "    reqs = requests.get(url)\n",
    "    soup = BeautifulSoup(reqs.text, 'lxml')\n",
    "    soup.find_all(\"li\")\n",
    "    l = []\n",
    "    \n",
    "    for tag in soup.find_all(\"li\"):\n",
    "        l.append(tag.text)\n",
    "    \n",
    "#     df=pd.DataFrame(l, columns = [\"name\"])\n",
    "#     dfp=pd.DataFrame(l, columns = [\"name\"])\n",
    "    dfh=pd.DataFrame(l, columns = [\"name\"])\n",
    "    \n",
    "    \n",
    "#     dfp=dfp[dfp['name'].str.contains(\"Long Beach -- |Pasadena --\")]\n",
    "#     dfp['name'] = dfp['name'].str.replace('--', '\\t')\n",
    "#     dfp[['A','B']]=dfp.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "#     dfp[[\"B\"]] = dfp[[\"B\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "#     dfp=dfp[['A','B']]\n",
    "#     dfp['A'] = dfp['A'].str.strip()\n",
    "#     dfp['ds'] = pd.to_datetime(row['ds'])\n",
    "#     appended_data_list.append(dfp)\n",
    "    \n",
    "    dfh=dfh[dfh['name'].str.contains(\"Hospital\")]\n",
    "    dfh[['A','B']]=dfh.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "    dfp[[\"B\"]] = dfp[[\"B\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "    dfh=dfh[['A','B']]\n",
    "    dfh['ds'] = pd.to_datetime(row['ds'])\n",
    "    print(dfh)\n",
    "    appended_data_list_h.append(dfh)\n",
    "\n",
    "    \n",
    "    \n",
    "#     df=df[df['name'].str.contains(\"Unincorporated -|City of|Los Angeles -\")]\n",
    "#     df = df[~df['name'].isin(['Pasadena', 'Long Beach'])]\n",
    "#     df[['A','B','C','D','E','F']] = df.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "#     df = df[['A','B','D']]\n",
    "#     df['A'] = df['A'].str.replace('City of ', '')\n",
    "#     df['A'] = df['A'].str.replace('Unincorporated - ', '')\n",
    "#     df['A'] = df['A'].str.replace('Los Angeles - ', '')\n",
    "#     df['A'] = df['A'].str.strip()\n",
    "#     df['B'] = df['B'].str.replace('--', '0')\n",
    "#     df['D'] = df['D'].str.replace('--', '0')\n",
    "#     df[[\"B\", \"D\"]] = df[[\"B\", \"D\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "#     df=pd.pivot_table(df, index = [\"A\"], values = [\"B\",\"D\"], aggfunc={\"D\":np.max, \"B\":np.sum}).reset_index()    \n",
    "#     df['ds'] = pd.to_datetime(row['ds'])\n",
    "#     appended_data_list_b.append(df)\n",
    "#     time.sleep(3) # Sleep for 3 seconds\n",
    " \n",
    "# df_final = pd.concat(appended_data_list_b)\n",
    "# df_final\n",
    "# dfp_final = pd.concat(appended_data_list)\n",
    "\n",
    "\n",
    "dfh_final = pd.concat(appended_data_list_h)\n",
    "dfh_final.to_csv('/Users/J3/Downloads/covid_final_hospital.csv')\n",
    "print(dfh_final)\n",
    "\n",
    "\n",
    "# print(dfp_final)\n",
    "\n",
    "# df_final=df_final.append(dfp_final).reset_index()\n",
    "\n",
    "#dfp_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'ds'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2896\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2897\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2898\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'ds'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-39-3d716462ec1c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mdfh_final\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/Users/J3/Downloads/covid_final_hospital_b.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mdfh_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"dow\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdfh_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ds\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdayofweek\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mdfh_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"week_of_year\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdfh_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ds\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweek\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2978\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2979\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2980\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2981\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2982\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2897\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2898\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2899\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2900\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2901\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'ds'"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pyplot import figure\n",
    "import seaborn as sns\n",
    "figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\n",
    "dfh_final[\"B\"] = pd.to_numeric(dfh_final[\"B\"])\n",
    "dfh_final.dtypes\n",
    "dfh_final=dfh_final.sort_values([\"B\"])\n",
    "#print(dfh_final[\"B\"])\n",
    "dfh_final[\"new_hospitalizations\"]=dfh_final[\"B\"].diff()\n",
    "dfh_final[\"new_hospitalizations_rolling_7d_mean\"] = dfh_final[\"new_hospitalizations\"].rolling(7).mean().round(0)\n",
    "dfh_final.to_csv('/Users/J3/Downloads/covid_final_hospital_b.csv')\n",
    "\n",
    "dfh_final[\"dow\"]=dfh_final[\"ds\"].dt.dayofweek\n",
    "dfh_final[\"week_of_year\"]=dfh_final[\"ds\"].dt.week\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "dfplot = dfh_final.pivot(index = 'dow', columns = 'week_of_year', values = 'D').reset_index().rename_axis(None, axis=1)\n",
    "dfplot.columns = dfplot.columns.map(str)\n",
    "dfplot.set_index('dow')\n",
    "lines = dfplot.plot.line()\n",
    "plt.legend( loc = 'center left' ,bbox_to_anchor=(1, 0.5))\n",
    "plt.title('LA County Hospitalizations by Day of Week')\n",
    "lines.figure.savefig('plot2.pdf')\n",
    "\n",
    "\n",
    "\n",
    "#df.columns = df.columns.map(str)\n",
    "\n",
    "plot1 = dfh_final.plot(x='ds', y = 'D')\n",
    "plot1.figure.savefig('plot.pdf')\n",
    "plt.title('LA County Daily Hospitalization')\n",
    "plt.legend( loc = 'upper left')\n",
    "#dfplot.drop(columns=['week_of_year'])\n",
    "\n",
    "#print(dfh_final)\n",
    "\n",
    "#dfplot.dtypes\n",
    "#sns.set(style=\"darkgrid\")\n",
    "#g=sns.relplot(x=\"ds\", y=\"D\", kind = \"line\", data = dfh_final)\n",
    "#g.fig.autofmt_xdate()\n",
    "\n",
    "#dfh_final[\"dow\"] = dfh_final[\"dow\"].astype(np.float)\n",
    "#sns.relplot(x=\"dow\", y = \"D\", hue = \"week_of_year\", kind = \"line\", data = \"dfh_final\")\n",
    "#print(dfh_final.dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2369&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2367&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2365&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2362&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2361&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2359&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2357&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2356\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2355\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2353\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2352\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2349\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2347\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2345\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2343&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2341\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2337\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2336&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2333\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2331&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2329\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2326\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2325\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2323\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2321\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2319\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2317\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2314\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2312\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2311\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2309\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2307\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2305\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2302\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2300\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2298\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2297\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2294&row=\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2292&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&cur=cur&prid=2291&row=25&start=1\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2290\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2289\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2288\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2287\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2285\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2284\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2282\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2280\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2279\n",
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2277\n",
      "                       A     B         ds  new_hospitalizations  \\\n",
      "9    Hospitalized (Ever)    84 2020-03-22                   NaN   \n",
      "9    Hospitalized (Ever)    90 2020-03-23                   6.0   \n",
      "8    Hospitalized (Ever)   119 2020-03-24                  29.0   \n",
      "11   Hospitalized (Ever)   160 2020-03-25                  41.0   \n",
      "11   Hospitalized (Ever)   253 2020-03-26                  93.0   \n",
      "11   Hospitalized (Ever)   317 2020-03-27                  64.0   \n",
      "11   Hospitalized (Ever)   398 2020-03-28                  81.0   \n",
      "11   Hospitalized (Ever)   453 2020-03-29                  55.0   \n",
      "10   Hospitalized (Ever)   492 2020-03-30                  39.0   \n",
      "12   Hospitalized (Ever)   594 2020-03-31                 102.0   \n",
      "12   Hospitalized (Ever)   733 2020-04-01                 139.0   \n",
      "12   Hospitalized (Ever)   879 2020-04-02                 146.0   \n",
      "12   Hospitalized (Ever)  1018 2020-04-03                 139.0   \n",
      "15   Hospitalized (Ever)  1168 2020-04-04                 150.0   \n",
      "15   Hospitalized (Ever)  1257 2020-04-05                  89.0   \n",
      "15   Hospitalized (Ever)  1366 2020-04-06                 109.0   \n",
      "21   Hospitalized (Ever)  1510 2020-04-07                 144.0   \n",
      "21   Hospitalized (Ever)  1714 2020-04-08                 204.0   \n",
      "21   Hospitalized (Ever)  1894 2020-04-09                 180.0   \n",
      "22   Hospitalized (Ever)  2043 2020-04-10                 149.0   \n",
      "21   Hospitalized (Ever)  2172 2020-04-11                 129.0   \n",
      "21   Hospitalized (Ever)  2246 2020-04-12                  74.0   \n",
      "21   Hospitalized (Ever)  2354 2020-04-13                 108.0   \n",
      "21   Hospitalized (Ever)  2517 2020-04-14                 163.0   \n",
      "21   Hospitalized (Ever)  2704 2020-04-15                 187.0   \n",
      "21   Hospitalized (Ever)  2847 2020-04-16                 143.0   \n",
      "21   Hospitalized (Ever)  3014 2020-04-17                 167.0   \n",
      "21   Hospitalized (Ever)  3280 2020-04-18                 266.0   \n",
      "21   Hospitalized (Ever)  3387 2020-04-19                 107.0   \n",
      "21   Hospitalized (Ever)  3465 2020-04-20                  78.0   \n",
      "21   Hospitalized (Ever)  3639 2020-04-21                 174.0   \n",
      "21   Hospitalized (Ever)  3902 2020-04-22                 263.0   \n",
      "27   Hospitalized (Ever)  4053 2020-04-23                 151.0   \n",
      "27   Hospitalized (Ever)  4211 2020-04-24                 158.0   \n",
      "29   Hospitalized (Ever)  4319 2020-04-25                 108.0   \n",
      "23   Hospitalized (Ever)  4380 2020-04-26                  61.0   \n",
      "23   Hospitalized (Ever)  4403 2020-04-27                  23.0   \n",
      "23   Hospitalized (Ever)  4507 2020-04-28                 104.0   \n",
      "23   Hospitalized (Ever)  4715 2020-04-29                 208.0   \n",
      "23   Hospitalized (Ever)  4813 2020-04-30                  98.0   \n",
      "23   Hospitalized (Ever)  4880 2020-05-01                  67.0   \n",
      "23   Hospitalized (Ever)  4956 2020-05-02                  76.0   \n",
      "23   Hospitalized (Ever)  4986 2020-05-03                  30.0   \n",
      "23   Hospitalized (Ever)  5019 2020-05-04                  33.0   \n",
      "30   Hospitalized (Ever)  5081 2020-05-05                  62.0   \n",
      "23   Hospitalized (Ever)  5142 2020-05-06                  61.0   \n",
      "23   Hospitalized (Ever)  5238 2020-05-07                  96.0   \n",
      "23   Hospitalized (Ever)  5298 2020-05-08                  60.0   \n",
      "23   Hospitalized (Ever)  5363 2020-05-09                  65.0   \n",
      "23   Hospitalized (Ever)  5410 2020-05-10                  47.0   \n",
      "\n",
      "    new_hospitalizations_rolling_7d_mean  \n",
      "9                                    NaN  \n",
      "9                                    NaN  \n",
      "8                                    NaN  \n",
      "11                                   NaN  \n",
      "11                                   NaN  \n",
      "11                                   NaN  \n",
      "11                                   NaN  \n",
      "11                                  53.0  \n",
      "10                                  57.0  \n",
      "12                                  68.0  \n",
      "12                                  82.0  \n",
      "12                                  89.0  \n",
      "12                                 100.0  \n",
      "15                                 110.0  \n",
      "15                                 115.0  \n",
      "15                                 125.0  \n",
      "21                                 131.0  \n",
      "21                                 140.0  \n",
      "21                                 145.0  \n",
      "22                                 146.0  \n",
      "21                                 143.0  \n",
      "21                                 141.0  \n",
      "21                                 141.0  \n",
      "21                                 144.0  \n",
      "21                                 141.0  \n",
      "21                                 136.0  \n",
      "21                                 139.0  \n",
      "21                                 158.0  \n",
      "21                                 163.0  \n",
      "21                                 159.0  \n",
      "21                                 160.0  \n",
      "21                                 171.0  \n",
      "27                                 172.0  \n",
      "27                                 171.0  \n",
      "29                                 148.0  \n",
      "23                                 142.0  \n",
      "23                                 134.0  \n",
      "23                                 124.0  \n",
      "23                                 116.0  \n",
      "23                                 109.0  \n",
      "23                                  96.0  \n",
      "23                                  91.0  \n",
      "23                                  87.0  \n",
      "23                                  88.0  \n",
      "30                                  82.0  \n",
      "23                                  61.0  \n",
      "23                                  61.0  \n",
      "23                                  60.0  \n",
      "23                                  58.0  \n",
      "23                                  61.0  \n"
     ]
    }
   ],
   "source": [
    "#hospital \n",
    "# column_names = ['u', 'ds']\n",
    "# ul = pd.read_csv(\"/Users/J3/Downloads/url_list.csv\"\n",
    "#                  , skiprows = 1\n",
    "#                  , names = column_names\n",
    "#                 )\n",
    "\n",
    "appended_data_list_h = []\n",
    "\n",
    "for i, row in ul[ul['ds'] >= '2020-03-21'].iterrows():\n",
    "    print(row['u'])\n",
    "    url = row['u']\n",
    "    reqs = requests.get(url)\n",
    "    soup = BeautifulSoup(reqs.text, 'lxml')\n",
    "    soup.find_all(\"li\")\n",
    "    l = []\n",
    "    \n",
    "    for tag in soup.find_all(\"li\"):\n",
    "        l.append(tag.text)\n",
    "\n",
    "    dfh=pd.DataFrame(l, columns = [\"name\"])\n",
    "\n",
    "    dfh=dfh[dfh['name'].str.contains(\"Hospital\")]\n",
    "    dfh=dfh[~dfh['name'].str.contains(\"Avoid\")]\n",
    "    dfh[['A','B']]=dfh.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "    dfh[[\"B\"]] = dfh[[\"B\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "    dfh=dfh[['A','B']]\n",
    "    dfh['ds'] = pd.to_datetime(row['ds'])\n",
    "    appended_data_list_h.append(dfh)\n",
    "\n",
    "dfh_final = pd.concat(appended_data_list_h)\n",
    "dfh_final=dfh_final.sort_values([\"B\"])\n",
    "dfh_final[\"new_hospitalizations\"]=dfh_final[\"B\"].diff()\n",
    "dfh_final[\"new_hospitalizations_rolling_7d_mean\"] = dfh_final[\"new_hospitalizations\"].rolling(7).mean().round(0)\n",
    "print(dfh_final)\n",
    "dfh_final.to_csv(file_path+'covid_final_hospital.csv')\n",
    "# dfh_final.to_csv('/Users/J5/Downloads/covid_final_hospital.csv')\n",
    "# dfh_final.to_csv('/Users/J5/Downloads/covid_final_hospital_b.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/J3/Downloads/covid_final_20200424.csv'"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import datetime\n",
    "file_path = '/Users/J3/Downloads/'\n",
    "file_name_hospital = 'covid_final_hospital'\n",
    "z=df_final['ds'].max().strftime(\"%Y%m%d\")\n",
    "file_path + file_name + \"_\" + z + \".csv\"\n",
    "#z.strftime(\"%Y%m%d\")\n",
    "#print(z)\n",
    "#datetime.datetime.strptime(z,'%Y%m%d%H%M%S')\n",
    "#dfh_final.to_csv('/Users/J3/Downloads/covid_final_hospital.csv')\n",
    "#file_path = '/Users/J3/Downloads/'\n",
    "#file_path + df_final['ds'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "In [588]: df = pd.DataFrame({ 'date':[2000,2001,2003,2004,2005,2007],\n",
    "                              'value':[5,10,8,72,12,13] })\n",
    "\n",
    "In [589]: df['previous_value'] = df.value.shift()[ df.date == df.date.shift() + 1 ]\n",
    "\n",
    "In [590]: df\n",
    "Out[590]: \n",
    "   date  value  previous_value\n",
    "0  2000      5             NaN\n",
    "1  2001     10               5\n",
    "2  2003      8             NaN\n",
    "3  2004     72               8\n",
    "4  2005     12              72\n",
    "5  2007     13             NaN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           date       county       state    fips  cases  deaths  new_cases  \\\n",
      "0    2020-01-26  Los Angeles  California  6037.0      1       0        NaN   \n",
      "1    2020-01-27  Los Angeles  California  6037.0      1       0        0.0   \n",
      "2    2020-01-28  Los Angeles  California  6037.0      1       0        0.0   \n",
      "3    2020-01-29  Los Angeles  California  6037.0      1       0        0.0   \n",
      "4    2020-01-30  Los Angeles  California  6037.0      1       0        0.0   \n",
      "5    2020-01-31  Los Angeles  California  6037.0      1       0        0.0   \n",
      "6    2020-02-01  Los Angeles  California  6037.0      1       0        0.0   \n",
      "7    2020-02-02  Los Angeles  California  6037.0      1       0        0.0   \n",
      "8    2020-02-03  Los Angeles  California  6037.0      1       0        0.0   \n",
      "9    2020-02-04  Los Angeles  California  6037.0      1       0        0.0   \n",
      "10   2020-02-05  Los Angeles  California  6037.0      1       0        0.0   \n",
      "11   2020-02-06  Los Angeles  California  6037.0      1       0        0.0   \n",
      "12   2020-02-07  Los Angeles  California  6037.0      1       0        0.0   \n",
      "13   2020-02-08  Los Angeles  California  6037.0      1       0        0.0   \n",
      "14   2020-02-09  Los Angeles  California  6037.0      1       0        0.0   \n",
      "15   2020-02-10  Los Angeles  California  6037.0      1       0        0.0   \n",
      "16   2020-02-11  Los Angeles  California  6037.0      1       0        0.0   \n",
      "17   2020-02-12  Los Angeles  California  6037.0      1       0        0.0   \n",
      "18   2020-02-13  Los Angeles  California  6037.0      1       0        0.0   \n",
      "19   2020-02-14  Los Angeles  California  6037.0      1       0        0.0   \n",
      "20   2020-02-15  Los Angeles  California  6037.0      1       0        0.0   \n",
      "21   2020-02-16  Los Angeles  California  6037.0      1       0        0.0   \n",
      "22   2020-02-17  Los Angeles  California  6037.0      1       0        0.0   \n",
      "23   2020-02-18  Los Angeles  California  6037.0      1       0        0.0   \n",
      "24   2020-02-19  Los Angeles  California  6037.0      1       0        0.0   \n",
      "25   2020-02-20  Los Angeles  California  6037.0      1       0        0.0   \n",
      "26   2020-02-21  Los Angeles  California  6037.0      1       0        0.0   \n",
      "27   2020-02-22  Los Angeles  California  6037.0      1       0        0.0   \n",
      "28   2020-02-23  Los Angeles  California  6037.0      1       0        0.0   \n",
      "29   2020-02-24  Los Angeles  California  6037.0      1       0        0.0   \n",
      "30   2020-02-25  Los Angeles  California  6037.0      1       0        0.0   \n",
      "31   2020-02-26  Los Angeles  California  6037.0      1       0        0.0   \n",
      "32   2020-02-27  Los Angeles  California  6037.0      1       0        0.0   \n",
      "33   2020-02-28  Los Angeles  California  6037.0      1       0        0.0   \n",
      "34   2020-02-29  Los Angeles  California  6037.0      1       0        0.0   \n",
      "35   2020-03-01  Los Angeles  California  6037.0      1       0        0.0   \n",
      "36   2020-03-02  Los Angeles  California  6037.0      1       0        0.0   \n",
      "37   2020-03-03  Los Angeles  California  6037.0      1       0        0.0   \n",
      "38   2020-03-04  Los Angeles  California  6037.0      7       0        6.0   \n",
      "39   2020-03-05  Los Angeles  California  6037.0     11       0        4.0   \n",
      "40   2020-03-06  Los Angeles  California  6037.0     13       0        2.0   \n",
      "41   2020-03-07  Los Angeles  California  6037.0     14       0        1.0   \n",
      "42   2020-03-08  Los Angeles  California  6037.0     14       0        0.0   \n",
      "43   2020-03-09  Los Angeles  California  6037.0     19       0        5.0   \n",
      "44   2020-03-10  Los Angeles  California  6037.0     20       0        1.0   \n",
      "45   2020-03-11  Los Angeles  California  6037.0     28       1        8.0   \n",
      "46   2020-03-12  Los Angeles  California  6037.0     32       1        4.0   \n",
      "47   2020-03-13  Los Angeles  California  6037.0     40       1        8.0   \n",
      "48   2020-03-14  Los Angeles  California  6037.0     53       1       13.0   \n",
      "49   2020-03-15  Los Angeles  California  6037.0     69       1       16.0   \n",
      "50   2020-03-16  Los Angeles  California  6037.0     94       1       25.0   \n",
      "51   2020-03-17  Los Angeles  California  6037.0    144       1       50.0   \n",
      "52   2020-03-18  Los Angeles  California  6037.0    190       1       46.0   \n",
      "53   2020-03-19  Los Angeles  California  6037.0    231       2       41.0   \n",
      "54   2020-03-20  Los Angeles  California  6037.0    292       2       61.0   \n",
      "55   2020-03-21  Los Angeles  California  6037.0    351       4       59.0   \n",
      "56   2020-03-22  Los Angeles  California  6037.0    421       5       70.0   \n",
      "57   2020-03-23  Los Angeles  California  6037.0    536       7      115.0   \n",
      "58   2020-03-24  Los Angeles  California  6037.0    662      11      126.0   \n",
      "59   2020-03-25  Los Angeles  California  6037.0    799      13      137.0   \n",
      "60   2020-03-26  Los Angeles  California  6037.0   1216      21      417.0   \n",
      "61   2020-03-27  Los Angeles  California  6037.0   1465      27      249.0   \n",
      "62   2020-03-28  Los Angeles  California  6037.0   1804      33      339.0   \n",
      "63   2020-03-29  Los Angeles  California  6037.0   2136      37      332.0   \n",
      "64   2020-03-30  Los Angeles  California  6037.0   2474      44      338.0   \n",
      "65   2020-03-31  Los Angeles  California  6037.0   3011      54      537.0   \n",
      "66   2020-04-01  Los Angeles  California  6037.0   3518      65      507.0   \n",
      "67   2020-04-02  Los Angeles  California  6037.0   4045      78      527.0   \n",
      "68   2020-04-03  Los Angeles  California  6037.0   4566      89      521.0   \n",
      "69   2020-04-04  Los Angeles  California  6037.0   5277     117      711.0   \n",
      "70   2020-04-05  Los Angeles  California  6037.0   5940     132      663.0   \n",
      "71   2020-04-06  Los Angeles  California  6037.0   6360     147      420.0   \n",
      "72   2020-04-07  Los Angeles  California  6037.0   6910     169      550.0   \n",
      "73   2020-04-08  Los Angeles  California  6037.0   7530     198      620.0   \n",
      "74   2020-04-09  Los Angeles  California  6037.0   7955     223      425.0   \n",
      "75   2020-04-10  Los Angeles  California  6037.0   8430     241      475.0   \n",
      "76   2020-04-11  Los Angeles  California  6037.0   8873     265      443.0   \n",
      "77   2020-04-12  Los Angeles  California  6037.0   9192     296      319.0   \n",
      "78   2020-04-13  Los Angeles  California  6037.0   9420     320      228.0   \n",
      "79   2020-04-14  Los Angeles  California  6037.0  10047     360      627.0   \n",
      "80   2020-04-15  Los Angeles  California  6037.0  10496     402      449.0   \n",
      "81   2020-04-16  Los Angeles  California  6037.0  10854     455      358.0   \n",
      "82   2020-04-17  Los Angeles  California  6037.0  11391     495      537.0   \n",
      "83   2020-04-18  Los Angeles  California  6037.0  12021     576      630.0   \n",
      "84   2020-04-19  Los Angeles  California  6037.0  12341     600      320.0   \n",
      "85   2020-04-20  Los Angeles  California  6037.0  13816     617     1475.0   \n",
      "86   2020-04-21  Los Angeles  California  6037.0  15140     663     1324.0   \n",
      "87   2020-04-22  Los Angeles  California  6037.0  16435     729     1295.0   \n",
      "88   2020-04-23  Los Angeles  California  6037.0  17508     797     1073.0   \n",
      "89   2020-04-24  Los Angeles  California  6037.0  18545     850     1037.0   \n",
      "90   2020-04-25  Los Angeles  California  6037.0  19107     895      562.0   \n",
      "91   2020-04-26  Los Angeles  California  6037.0  19528     913      421.0   \n",
      "92   2020-04-27  Los Angeles  California  6037.0  20417     942      889.0   \n",
      "93   2020-04-28  Los Angeles  California  6037.0  20976    1000      559.0   \n",
      "94   2020-04-29  Los Angeles  California  6037.0  22485    1056     1509.0   \n",
      "95   2020-04-30  Los Angeles  California  6037.0  23182    1111      697.0   \n",
      "96   2020-05-01  Los Angeles  California  6037.0  24215    1172     1033.0   \n",
      "97   2020-05-02  Los Angeles  California  6037.0  24894    1209      679.0   \n",
      "98   2020-05-03  Los Angeles  California  6037.0  25662    1229      768.0   \n",
      "99   2020-05-04  Los Angeles  California  6037.0  26217    1256      555.0   \n",
      "100  2020-05-05  Los Angeles  California  6037.0  27815    1313     1598.0   \n",
      "101  2020-05-06  Los Angeles  California  6037.0  28644    1367      829.0   \n",
      "102  2020-05-07  Los Angeles  California  6037.0  29427    1418      783.0   \n",
      "103  2020-05-08  Los Angeles  California  6037.0  30296    1468      869.0   \n",
      "104  2020-05-09  Los Angeles  California  6037.0  31197    1512      901.0   \n",
      "\n",
      "     new_deaths         ds  dow  week_of_year       B  deaths_7d_avg  \\\n",
      "0           NaN 2020-01-26    6             4     NaN            NaN   \n",
      "1           0.0 2020-01-27    0             5     NaN            NaN   \n",
      "2           0.0 2020-01-28    1             5     NaN            NaN   \n",
      "3           0.0 2020-01-29    2             5     NaN            NaN   \n",
      "4           0.0 2020-01-30    3             5     NaN            NaN   \n",
      "5           0.0 2020-01-31    4             5     NaN            NaN   \n",
      "6           0.0 2020-02-01    5             5     NaN            NaN   \n",
      "7           0.0 2020-02-02    6             5     NaN            0.0   \n",
      "8           0.0 2020-02-03    0             6     NaN            0.0   \n",
      "9           0.0 2020-02-04    1             6     NaN            0.0   \n",
      "10          0.0 2020-02-05    2             6     NaN            0.0   \n",
      "11          0.0 2020-02-06    3             6     NaN            0.0   \n",
      "12          0.0 2020-02-07    4             6     NaN            0.0   \n",
      "13          0.0 2020-02-08    5             6     NaN            0.0   \n",
      "14          0.0 2020-02-09    6             6     NaN            0.0   \n",
      "15          0.0 2020-02-10    0             7     NaN            0.0   \n",
      "16          0.0 2020-02-11    1             7     NaN            0.0   \n",
      "17          0.0 2020-02-12    2             7     NaN            0.0   \n",
      "18          0.0 2020-02-13    3             7     NaN            0.0   \n",
      "19          0.0 2020-02-14    4             7     NaN            0.0   \n",
      "20          0.0 2020-02-15    5             7     NaN            0.0   \n",
      "21          0.0 2020-02-16    6             7     NaN            0.0   \n",
      "22          0.0 2020-02-17    0             8     NaN            0.0   \n",
      "23          0.0 2020-02-18    1             8     NaN            0.0   \n",
      "24          0.0 2020-02-19    2             8     NaN            0.0   \n",
      "25          0.0 2020-02-20    3             8     NaN            0.0   \n",
      "26          0.0 2020-02-21    4             8     NaN            0.0   \n",
      "27          0.0 2020-02-22    5             8     NaN            0.0   \n",
      "28          0.0 2020-02-23    6             8     NaN            0.0   \n",
      "29          0.0 2020-02-24    0             9     NaN            0.0   \n",
      "30          0.0 2020-02-25    1             9     NaN            0.0   \n",
      "31          0.0 2020-02-26    2             9     NaN            0.0   \n",
      "32          0.0 2020-02-27    3             9     NaN            0.0   \n",
      "33          0.0 2020-02-28    4             9     NaN            0.0   \n",
      "34          0.0 2020-02-29    5             9     NaN            0.0   \n",
      "35          0.0 2020-03-01    6             9     NaN            0.0   \n",
      "36          0.0 2020-03-02    0            10     NaN            0.0   \n",
      "37          0.0 2020-03-03    1            10     NaN            0.0   \n",
      "38          0.0 2020-03-04    2            10     NaN            0.0   \n",
      "39          0.0 2020-03-05    3            10     NaN            0.0   \n",
      "40          0.0 2020-03-06    4            10     NaN            0.0   \n",
      "41          0.0 2020-03-07    5            10     NaN            0.0   \n",
      "42          0.0 2020-03-08    6            10     NaN            0.0   \n",
      "43          0.0 2020-03-09    0            11     NaN            0.0   \n",
      "44          0.0 2020-03-10    1            11     NaN            0.0   \n",
      "45          1.0 2020-03-11    2            11     NaN            0.0   \n",
      "46          0.0 2020-03-12    3            11     NaN            0.0   \n",
      "47          0.0 2020-03-13    4            11     NaN            0.0   \n",
      "48          0.0 2020-03-14    5            11     NaN            0.0   \n",
      "49          0.0 2020-03-15    6            11     NaN            0.0   \n",
      "50          0.0 2020-03-16    0            12     NaN            0.0   \n",
      "51          0.0 2020-03-17    1            12     NaN            0.0   \n",
      "52          0.0 2020-03-18    2            12     NaN            0.0   \n",
      "53          1.0 2020-03-19    3            12     NaN            0.0   \n",
      "54          0.0 2020-03-20    4            12     NaN            0.0   \n",
      "55          2.0 2020-03-21    5            12     NaN            0.0   \n",
      "56          1.0 2020-03-22    6            12    84.0            1.0   \n",
      "57          2.0 2020-03-23    0            13    90.0            1.0   \n",
      "58          4.0 2020-03-24    1            13   119.0            1.0   \n",
      "59          2.0 2020-03-25    2            13   160.0            2.0   \n",
      "60          8.0 2020-03-26    3            13   253.0            3.0   \n",
      "61          6.0 2020-03-27    4            13   317.0            4.0   \n",
      "62          6.0 2020-03-28    5            13   398.0            4.0   \n",
      "63          4.0 2020-03-29    6            13   453.0            5.0   \n",
      "64          7.0 2020-03-30    0            14   492.0            5.0   \n",
      "65         10.0 2020-03-31    1            14   594.0            6.0   \n",
      "66         11.0 2020-04-01    2            14   733.0            7.0   \n",
      "67         13.0 2020-04-02    3            14   879.0            8.0   \n",
      "68         11.0 2020-04-03    4            14  1018.0            9.0   \n",
      "69         28.0 2020-04-04    5            14  1168.0           12.0   \n",
      "70         15.0 2020-04-05    6            14  1257.0           14.0   \n",
      "71         15.0 2020-04-06    0            15  1366.0           15.0   \n",
      "72         22.0 2020-04-07    1            15  1510.0           16.0   \n",
      "73         29.0 2020-04-08    2            15  1714.0           19.0   \n",
      "74         25.0 2020-04-09    3            15  1894.0           21.0   \n",
      "75         18.0 2020-04-10    4            15  2043.0           22.0   \n",
      "76         24.0 2020-04-11    5            15  2172.0           21.0   \n",
      "77         31.0 2020-04-12    6            15  2246.0           23.0   \n",
      "78         24.0 2020-04-13    0            16  2354.0           25.0   \n",
      "79         40.0 2020-04-14    1            16  2517.0           27.0   \n",
      "80         42.0 2020-04-15    2            16  2704.0           29.0   \n",
      "81         53.0 2020-04-16    3            16  2847.0           33.0   \n",
      "82         40.0 2020-04-17    4            16  3014.0           36.0   \n",
      "83         81.0 2020-04-18    5            16  3280.0           44.0   \n",
      "84         24.0 2020-04-19    6            16  3387.0           43.0   \n",
      "85         17.0 2020-04-20    0            17  3465.0           42.0   \n",
      "86         46.0 2020-04-21    1            17  3639.0           43.0   \n",
      "87         66.0 2020-04-22    2            17  3902.0           47.0   \n",
      "88         68.0 2020-04-23    3            17  4053.0           49.0   \n",
      "89         53.0 2020-04-24    4            17  4211.0           51.0   \n",
      "90         45.0 2020-04-25    5            17  4319.0           46.0   \n",
      "91         18.0 2020-04-26    6            17  4380.0           45.0   \n",
      "92         29.0 2020-04-27    0            18  4403.0           46.0   \n",
      "93         58.0 2020-04-28    1            18  4507.0           48.0   \n",
      "94         56.0 2020-04-29    2            18  4715.0           47.0   \n",
      "95         55.0 2020-04-30    3            18  4813.0           45.0   \n",
      "96         61.0 2020-05-01    4            18  4880.0           46.0   \n",
      "97         37.0 2020-05-02    5            18  4956.0           45.0   \n",
      "98         20.0 2020-05-03    6            18  4986.0           45.0   \n",
      "99         27.0 2020-05-04    0            19  5019.0           45.0   \n",
      "100        57.0 2020-05-05    1            19  5081.0           45.0   \n",
      "101        54.0 2020-05-06    2            19  5142.0           44.0   \n",
      "102        51.0 2020-05-07    3            19  5238.0           44.0   \n",
      "103        50.0 2020-05-08    4            19  5298.0           42.0   \n",
      "104        44.0 2020-05-09    5            19  5363.0           43.0   \n",
      "\n",
      "     new_hospitalizations  hospitalizations_7d_avg  \n",
      "0                     NaN                      NaN  \n",
      "1                     NaN                      NaN  \n",
      "2                     NaN                      NaN  \n",
      "3                     NaN                      NaN  \n",
      "4                     NaN                      NaN  \n",
      "5                     NaN                      NaN  \n",
      "6                     NaN                      NaN  \n",
      "7                     NaN                      NaN  \n",
      "8                     NaN                      NaN  \n",
      "9                     NaN                      NaN  \n",
      "10                    NaN                      NaN  \n",
      "11                    NaN                      NaN  \n",
      "12                    NaN                      NaN  \n",
      "13                    NaN                      NaN  \n",
      "14                    NaN                      NaN  \n",
      "15                    NaN                      NaN  \n",
      "16                    NaN                      NaN  \n",
      "17                    NaN                      NaN  \n",
      "18                    NaN                      NaN  \n",
      "19                    NaN                      NaN  \n",
      "20                    NaN                      NaN  \n",
      "21                    NaN                      NaN  \n",
      "22                    NaN                      NaN  \n",
      "23                    NaN                      NaN  \n",
      "24                    NaN                      NaN  \n",
      "25                    NaN                      NaN  \n",
      "26                    NaN                      NaN  \n",
      "27                    NaN                      NaN  \n",
      "28                    NaN                      NaN  \n",
      "29                    NaN                      NaN  \n",
      "30                    NaN                      NaN  \n",
      "31                    NaN                      NaN  \n",
      "32                    NaN                      NaN  \n",
      "33                    NaN                      NaN  \n",
      "34                    NaN                      NaN  \n",
      "35                    NaN                      NaN  \n",
      "36                    NaN                      NaN  \n",
      "37                    NaN                      NaN  \n",
      "38                    NaN                      NaN  \n",
      "39                    NaN                      NaN  \n",
      "40                    NaN                      NaN  \n",
      "41                    NaN                      NaN  \n",
      "42                    NaN                      NaN  \n",
      "43                    NaN                      NaN  \n",
      "44                    NaN                      NaN  \n",
      "45                    NaN                      NaN  \n",
      "46                    NaN                      NaN  \n",
      "47                    NaN                      NaN  \n",
      "48                    NaN                      NaN  \n",
      "49                    NaN                      NaN  \n",
      "50                    NaN                      NaN  \n",
      "51                    NaN                      NaN  \n",
      "52                    NaN                      NaN  \n",
      "53                    NaN                      NaN  \n",
      "54                    NaN                      NaN  \n",
      "55                    NaN                      NaN  \n",
      "56                    NaN                      NaN  \n",
      "57                    6.0                      NaN  \n",
      "58                   29.0                      NaN  \n",
      "59                   41.0                      NaN  \n",
      "60                   93.0                      NaN  \n",
      "61                   64.0                      NaN  \n",
      "62                   81.0                      NaN  \n",
      "63                   55.0                     53.0  \n",
      "64                   39.0                     57.0  \n",
      "65                  102.0                     68.0  \n",
      "66                  139.0                     82.0  \n",
      "67                  146.0                     89.0  \n",
      "68                  139.0                    100.0  \n",
      "69                  150.0                    110.0  \n",
      "70                   89.0                    115.0  \n",
      "71                  109.0                    125.0  \n",
      "72                  144.0                    131.0  \n",
      "73                  204.0                    140.0  \n",
      "74                  180.0                    145.0  \n",
      "75                  149.0                    146.0  \n",
      "76                  129.0                    143.0  \n",
      "77                   74.0                    141.0  \n",
      "78                  108.0                    141.0  \n",
      "79                  163.0                    144.0  \n",
      "80                  187.0                    141.0  \n",
      "81                  143.0                    136.0  \n",
      "82                  167.0                    139.0  \n",
      "83                  266.0                    158.0  \n",
      "84                  107.0                    163.0  \n",
      "85                   78.0                    159.0  \n",
      "86                  174.0                    160.0  \n",
      "87                  263.0                    171.0  \n",
      "88                  151.0                    172.0  \n",
      "89                  158.0                    171.0  \n",
      "90                  108.0                    148.0  \n",
      "91                   61.0                    142.0  \n",
      "92                   23.0                    134.0  \n",
      "93                  104.0                    124.0  \n",
      "94                  208.0                    116.0  \n",
      "95                   98.0                    109.0  \n",
      "96                   67.0                     96.0  \n",
      "97                   76.0                     91.0  \n",
      "98                   30.0                     87.0  \n",
      "99                   33.0                     88.0  \n",
      "100                  62.0                     82.0  \n",
      "101                  61.0                     61.0  \n",
      "102                  96.0                     61.0  \n",
      "103                  60.0                     60.0  \n",
      "104                  65.0                     58.0  \n"
     ]
    }
   ],
   "source": [
    "#https://github.com/nytimes/covid-19-data/raw/master/us-counties.csv\n",
    "#https://github.com/nytimes/covid-19-data/raw/master/us-counties.csv\n",
    "df_ct = pd.read_csv('https://github.com/nytimes/covid-19-data/raw/master/us-counties.csv')\n",
    "df_ct = df_ct[df_ct[\"county\"] == \"Los Angeles\"]\n",
    "df_ct = df_ct.sort_values([\"date\"])\n",
    "df_ct[\"new_cases\"] = df_ct[\"cases\"].diff()\n",
    "df_ct[\"new_deaths\"] = df_ct[\"deaths\"].diff()\n",
    "\n",
    "df_ct[\"ds\"] = pd.to_datetime(df_ct['date'])\n",
    "df_ct[\"dow\"]=df_ct[\"ds\"].dt.dayofweek\n",
    "df_ct[\"week_of_year\"]=df_ct[\"ds\"].dt.week\n",
    "\n",
    "\n",
    "df_ct = pd.merge(df_ct, dfh_final[[\"B\",\"ds\"]], how = 'left', on = 'ds' )\n",
    "df_ct[\"B\"] = pd.to_numeric(df_ct[\"B\"], errors='coerce')\n",
    "\n",
    "df_ct[\"deaths_7d_avg\"] = df_ct[\"new_deaths\"].rolling(7).mean().round(0)\n",
    "df_ct[\"new_hospitalizations\"] = df_ct[\"B\"].diff()\n",
    "df_ct[\"hospitalizations_7d_avg\"] = df_ct[\"new_hospitalizations\"].rolling(7).mean().round(0)\n",
    "print(df_ct)\n",
    "# df_ct.to_csv('/Users/J5/Downloads/df_ct.csv')\n",
    "df_ct.to_csv(file_path+'df_ct.csv')\n",
    "\n",
    "\n",
    "#dfct_plot = df_ct.pivot(index = 'dow', columns = 'week_of_year', values = 'new_deaths').reset_index().rename_axis(None, axis=1)\n",
    "#dfct_plot.set_index('dow')\n",
    "\n",
    "#ctlines = dfct_plot.plot.line()\n",
    "#df_ct.plot(x='ds', y = 'new_cases')\n",
    "#df_ct.plot(x='ds', y = 'new_deaths')\n",
    "#print(df_ct)\n",
    "#dfplot = dfh_final.pivot(index = 'dow', columns = 'week_of_year', values = 'D').reset_index().rename_axis(None, axis=1)\n",
    "#dfplot.columns = dfplot.columns.map(str)\n",
    "#dfplot.set_index('dow')\n",
    "#print(dfct_plot)\n",
    "#df_final=pd.merge(df_final, lat_long, left_on=  ['neighborhood'],\n",
    "#                   right_on= ['neighborhood'], \n",
    "#                   how = 'left')\n",
    "#df = pd.merge(df,df2[['Key_Column','Target_Column']],on='Key_Column', how='left')\n",
    "\n",
    "#print(df_ct)\n",
    "#df_ct.dtypes\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#dfh_final[\"D\"]=dfh_final[\"B\"].diff()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       A       B         ds\n",
      "21   Hospitalized (Ever)  3902   2020-04-22\n",
      "21   Hospitalized (Ever)  3639   2020-04-21\n",
      "21   Hospitalized (Ever)  3465   2020-04-20\n",
      "21   Hospitalized (Ever)  3387   2020-04-19\n",
      "21   Hospitalized (Ever)  3280   2020-04-18\n",
      "21   Hospitalized (Ever)  3014   2020-04-17\n",
      "21   Hospitalized (Ever)  2847   2020-04-16\n",
      "21   Hospitalized (Ever)  2704   2020-04-15\n",
      "21   Hospitalized (Ever)  2517   2020-04-14\n",
      "21   Hospitalized (Ever)  2354   2020-04-13\n",
      "21   Hospitalized (Ever)  2246   2020-04-12\n",
      "21   Hospitalized (Ever)  2172   2020-04-11\n",
      "22   Hospitalized (Ever)  2043   2020-04-10\n",
      "21   Hospitalized (Ever)  1894   2020-04-09\n",
      "21   Hospitalized (Ever)  1714   2020-04-08\n",
      "21   Hospitalized (Ever)  1510   2020-04-07\n",
      "15   Hospitalized (Ever)  1366   2020-04-06\n",
      "15   Hospitalized (Ever)  1257   2020-04-05\n",
      "15   Hospitalized (Ever)  1168   2020-04-04\n",
      "12   Hospitalized (Ever)  1018   2020-04-03\n",
      "12   Hospitalized (Ever)   879   2020-04-02\n",
      "12   Hospitalized (Ever)   733   2020-04-01\n",
      "12   Hospitalized (Ever)   594   2020-03-31\n",
      "10   Hospitalized (Ever)   492   2020-03-30\n",
      "11   Hospitalized (Ever)   453   2020-03-29\n",
      "11   Hospitalized (Ever)   398   2020-03-28\n",
      "11   Hospitalized (Ever)   317   2020-03-27\n",
      "11   Hospitalized (Ever)   253   2020-03-26\n",
      "11   Hospitalized (Ever)   160   2020-03-25\n",
      "8    Hospitalized (Ever)   119   2020-03-24\n",
      "9    Hospitalized (Ever)    90   2020-03-23\n",
      "9    Hospitalized (Ever)    84   2020-03-22\n"
     ]
    }
   ],
   "source": [
    "print(dfh_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2282\n",
      "Empty DataFrame\n",
      "Columns: [name]\n",
      "Index: []\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'0'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m   4735\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4736\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mlibindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value_box\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4737\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.get_value_box\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.get_value_at\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/util.pxd\u001b[0m in \u001b[0;36mpandas._libs.util.get_value_at\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/util.pxd\u001b[0m in \u001b[0;36mpandas._libs.util.validate_indexer\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'str' object cannot be interpreted as an integer",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-93-a17633591821>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;31m#    print(dfd)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m     \u001b[0mdfd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdfd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\t\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m     \u001b[0mdfd\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"0\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m \u001b[0;31m#    dfd.columns = ['A', 'B']\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1066\u001b[0m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1067\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1068\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1069\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1070\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m   4742\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4743\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4744\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4745\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pragma: no cover\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4746\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m   4728\u001b[0m         \u001b[0mk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_convert_scalar_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"getitem\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4729\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtz\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"tz\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4731\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4732\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mholds_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_boolean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_value\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_value\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.index.Int64Engine._check_type\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: '0'"
     ]
    }
   ],
   "source": [
    "column_names = ['u', 'ds']\n",
    "ul = pd.read_csv(\"/Users/J3/Downloads/url_list.csv\"\n",
    "                 , skiprows = 1\n",
    "                 , names = column_names\n",
    "                )\n",
    "\n",
    "#notes\n",
    "#df['Date'] = pandas.to_datetime(df['Date'])\n",
    "#cols = ['A', 'B', 'ds']\n",
    "\n",
    "#appended_data = pd.DataFrame(columns= cols)\n",
    "# appended_data_list = []\n",
    "# appended_data_list_b = []\n",
    "appended_data_list_d = []\n",
    "#df = pd.DataFrame([])\n",
    "\n",
    "for i, row in ul[ul['ds'] <= '2020-03-25'].iterrows():\n",
    "    print(row['u'])\n",
    "    url = row['u']\n",
    "    reqs = requests.get(url)\n",
    "    soup = BeautifulSoup(reqs.text, 'lxml')\n",
    "    soup.find_all(\"li\")\n",
    "    l = []\n",
    "    \n",
    "    for tag in soup.find_all(\"li\"):\n",
    "        l.append(tag.text)\n",
    "    \n",
    "    dfd=pd.DataFrame(l, columns = [\"name\"])\n",
    "    dfd=dfd[dfd['name'].str.contains(\"Deaths\")]\n",
    "    print(dfd)\n",
    "#    print(dfd.dtypes)\n",
    "#    print(dfd)\n",
    "    dfd = dfd.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "    dfd[\"0\"]\n",
    "#    dfd.columns = ['A', 'B']\n",
    "   \n",
    "#    print(dfd.dtypes)\n",
    "#    print(dfd.columns)\n",
    "#    print(dfd[\"B\"])\n",
    "#    dfd[[\"B\"]] = dfd[[\"B\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "#    print(dfd)\n",
    "#    print(dfd)\n",
    "#    print(dfd)\n",
    "#    print(dfd.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) )\n",
    "#    dfd[['A','B']]=dfd.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "#    print(dfd)\n",
    "#    dfp[[\"B\"]] = dfp[[\"B\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "#    dfh=dfh[['A','B']]\n",
    "#    dfh['ds'] = pd.to_datetime(row['ds'])\n",
    "#    print(dfh)\n",
    "#    appended_data_list_h.append(dfh)\n",
    "\n",
    "    \n",
    "    \n",
    "#     df=df[df['name'].str.contains(\"Unincorporated -|City of|Los Angeles -\")]\n",
    "#     df = df[~df['name'].isin(['Pasadena', 'Long Beach'])]\n",
    "#     df[['A','B','C','D','E','F']] = df.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "#     df = df[['A','B','D']]\n",
    "#     df['A'] = df['A'].str.replace('City of ', '')\n",
    "#     df['A'] = df['A'].str.replace('Unincorporated - ', '')\n",
    "#     df['A'] = df['A'].str.replace('Los Angeles - ', '')\n",
    "#     df['A'] = df['A'].str.strip()\n",
    "#     df['B'] = df['B'].str.replace('--', '0')\n",
    "#     df['D'] = df['D'].str.replace('--', '0')\n",
    "#     df[[\"B\", \"D\"]] = df[[\"B\", \"D\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "#     df=pd.pivot_table(df, index = [\"A\"], values = [\"B\",\"D\"], aggfunc={\"D\":np.max, \"B\":np.sum}).reset_index()    \n",
    "#     df['ds'] = pd.to_datetime(row['ds'])\n",
    "#     appended_data_list_b.append(df)\n",
    "#     time.sleep(3) # Sleep for 3 seconds\n",
    " \n",
    "# df_final = pd.concat(appended_data_list_b)\n",
    "# df_final\n",
    "# dfp_final = pd.concat(appended_data_list)\n",
    "\n",
    "\n",
    "#dfh_final = pd.concat(appended_data_list_h)\n",
    "#dfh_final.to_csv('/Users/J3/Downloads/covid_final_hospital.csv')\n",
    "#print(dfh_final)\n",
    "\n",
    "\n",
    "# print(dfp_final)\n",
    "\n",
    "# df_final=df_final.append(dfp_final).reset_index()\n",
    "\n",
    "#dfp_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'keplergl'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-118-42ebbffa2640>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mkeplergl\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mKeplerGl\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mgeopandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mgpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'keplergl'"
     ]
    }
   ],
   "source": [
    "from keplergl import KeplerGl\n",
    "import geopandas as gpd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_names = ['u', 'ds']\n",
    "ul = pd.read_csv(\"/Users/J3/Downloads/url_list.csv\"\n",
    "                 , skiprows = 1\n",
    "                 , names = column_names\n",
    "                )\n",
    "\n",
    "#notes\n",
    "#df['Date'] = pandas.to_datetime(df['Date'])\n",
    "#cols = ['A', 'B', 'ds']\n",
    "\n",
    "#appended_data = pd.DataFrame(columns= cols)\n",
    "# appended_data_list = []\n",
    "# appended_data_list_b = []\n",
    "appended_data_list_h = []\n",
    "#df = pd.DataFrame([])\n",
    "\n",
    "for i, row in ul[ul['ds'] >= '2020-03-21'].iterrows():\n",
    "    print(row['u'])\n",
    "    url = row['u']\n",
    "    reqs = requests.get(url)\n",
    "    soup = BeautifulSoup(reqs.text, 'lxml')\n",
    "    soup.find_all(\"li\")\n",
    "    l = []\n",
    "    \n",
    "    for tag in soup.find_all(\"li\"):\n",
    "        l.append(tag.text)\n",
    "    \n",
    "#     df=pd.DataFrame(l, columns = [\"name\"])\n",
    "#     dfp=pd.DataFrame(l, columns = [\"name\"])\n",
    "    dfh=pd.DataFrame(l, columns = [\"name\"])\n",
    "    \n",
    "    \n",
    "#     dfp=dfp[dfp['name'].str.contains(\"Long Beach -- |Pasadena --\")]\n",
    "#     dfp['name'] = dfp['name'].str.replace('--', '\\t')\n",
    "#     dfp[['A','B']]=dfp.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "#     dfp[[\"B\"]] = dfp[[\"B\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "#     dfp=dfp[['A','B']]\n",
    "#     dfp['A'] = dfp['A'].str.strip()\n",
    "#     dfp['ds'] = pd.to_datetime(row['ds'])\n",
    "#     appended_data_list.append(dfp)\n",
    "    \n",
    "    dfh=dfh[dfh['name'].str.contains(\"Hospital\")]\n",
    "    dfh[['A','B']]=dfh.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "    dfp[[\"B\"]] = dfp[[\"B\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "    dfh=dfh[['A','B']]\n",
    "    dfh['ds'] = pd.to_datetime(row['ds'])\n",
    "    print(dfh)\n",
    "    appended_data_list_h.append(dfh)\n",
    "\n",
    "    \n",
    "    \n",
    "#     df=df[df['name'].str.contains(\"Unincorporated -|City of|Los Angeles -\")]\n",
    "#     df = df[~df['name'].isin(['Pasadena', 'Long Beach'])]\n",
    "#     df[['A','B','C','D','E','F']] = df.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "#     df = df[['A','B','D']]\n",
    "#     df['A'] = df['A'].str.replace('City of ', '')\n",
    "#     df['A'] = df['A'].str.replace('Unincorporated - ', '')\n",
    "#     df['A'] = df['A'].str.replace('Los Angeles - ', '')\n",
    "#     df['A'] = df['A'].str.strip()\n",
    "#     df['B'] = df['B'].str.replace('--', '0')\n",
    "#     df['D'] = df['D'].str.replace('--', '0')\n",
    "#     df[[\"B\", \"D\"]] = df[[\"B\", \"D\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "#     df=pd.pivot_table(df, index = [\"A\"], values = [\"B\",\"D\"], aggfunc={\"D\":np.max, \"B\":np.sum}).reset_index()    \n",
    "#     df['ds'] = pd.to_datetime(row['ds'])\n",
    "#     appended_data_list_b.append(df)\n",
    "#     time.sleep(3) # Sleep for 3 seconds\n",
    " \n",
    "# df_final = pd.concat(appended_data_list_b)\n",
    "# df_final\n",
    "# dfp_final = pd.concat(appended_data_list)\n",
    "\n",
    "\n",
    "dfh_final = pd.concat(appended_data_list_h)\n",
    "dfh_final.to_csv('/Users/J3/Downloads/covid_final_hospital.csv')\n",
    "print(dfh_final)\n",
    "\n",
    "\n",
    "# print(dfp_final)\n",
    "\n",
    "# df_final=df_final.append(dfp_final).reset_index()\n",
    "\n",
    "#dfp_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2317'\n",
    "#url = 'http://publichealth.lacounty.gov/phcommon/public/media/mediapubhpdetail.cfm?prid=2311'\n",
    "#url = 'http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2309'\n",
    "#url = 'http://publichealth.lacounty.gov/phcommon/public/media/mediapubdetail.cfm?unit=media&ou=ph&prog=media&prid=2288'\n",
    "reqs = requests.get(url)\n",
    "soup = BeautifulSoup(reqs.text, 'lxml')\n",
    "soup.find_all(\"li\")\n",
    "l = []\n",
    "\n",
    "for tag in soup.find_all(\"li\"):\n",
    "    l.append(tag.text)\n",
    "df=pd.DataFrame(l, columns = [\"name\"])\n",
    "\n",
    "#hospital\n",
    "dfh=df[df['name'].str.contains(\"Hospital\")]\n",
    "print(dfh)\n",
    "\n",
    "# Pasadena and Long Beach\n",
    "dfp=df[df['name'].str.contains(\"Long Beach -- |Pasadena --\")]\n",
    "dfp['name'] = dfp['name'].str.replace('--', '\\t')\n",
    "dfp[['A','B']]=dfp.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "dfp[[\"B\"]] = dfp[[\"B\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "dfp=dfp[['A','B']]\n",
    "#Pasadena and Long Beach\n",
    "df=df[df['name'].str.contains(\"Unincorporated -|City of|Los Angeles -\")]\n",
    "df[['A','B','C','D','E','F']] = df.name.apply(lambda x: pd.Series(str(x).split(\"\\t\"))) \n",
    "\n",
    "df = df[['A','B','D']]\n",
    "df['A'] = df['A'].str.replace('City of ', '')\n",
    "df['A'] = df['A'].str.replace('Unincorporated - ', '')\n",
    "df['A'] = df['A'].str.replace('Los Angeles - ', '')\n",
    "df['A'] = df['A'].str.strip()\n",
    "df['B'] = df['B'].str.replace('--', '0')\n",
    "df['D'] = df['D'].str.replace('--', '0')\n",
    "df[[\"B\", \"D\"]] = df[[\"B\", \"D\"]].apply(pd.to_numeric, errors = 'coerce', axis = 1)\n",
    "df=pd.pivot_table(df, index = [\"A\"], values = [\"B\",\"D\"], aggfunc={\"D\":np.max, \"B\":np.sum}).reset_index()\n",
    "df['ds'] = pd.to_datetime('2020-04-01')\n",
    "\n",
    "#df\n",
    "\n",
    "#df\n",
    "\n",
    "df=df.append(dfp).reset_index()\n",
    "df\n",
    "df.sort_values([\"B\"], ascending = False)\n",
    "print(df, 100)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i, row in ul.iterrows():\n",
    "    print(row['u'])\n",
    "    print(i)\n",
    "\n",
    "appended_data = []\n",
    "for infile in glob.glob(\"*.xlsx\"):\n",
    "    data = pandas.read_excel(infile)\n",
    "    # store DataFrame in list\n",
    "    appended_data.append(data)\n",
    "# see pd.concat documentation for more info\n",
    "appended_data = pd.concat(appended_data)\n",
    "# write DataFrame to an excel sheet \n",
    "appended_data.to_excel('appended.xlsx')    \n",
    "\n",
    "\n",
    "appended_data = []\n",
    "for infile in glob.glob(\"*.xlsx\"):\n",
    "    data = pandas.read_excel(infile)\n",
    "    # store DataFrame in list\n",
    "    appended_data.append(data)\n",
    "# see pd.concat documentation for more info\n",
    "appended_data = pd.concat(appended_data)\n",
    "\n",
    "\n",
    "data_day_list = []\n",
    "for i, day in enumerate(list_day):\n",
    "  data_day = df[df.day==day]\n",
    "  data_day_list.append(data_day)\n",
    "final_data_day = pd.concat(data_day_list)\n",
    "\n",
    "\n",
    "#   appended_data = pd.concat(appended_data)\n",
    "    #print(row['ds'])\n",
    "    #print(dfp)\n",
    "    #print(dfp)\n",
    "    #print(dfp.dtypes)\n",
    "    #print(appended_data_list)\n",
    "    \n",
    "        #data = data.drop(data.index[[0]])\n",
    "    #dfp = dfp.drop(dfp.index[[0]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_final.loc[df_final['A'] == 'Long Beach'].sort_values([\"ds\"], ascending = False)\n",
    "#dftemp=df_final[(df_final[\"A\"] != 'Long Beach') & (df_final[\"B\"] != 0)]\n",
    "#print(dftemp)\n",
    "#dftemp.loc[dftemp['A'] == 'Long Beach'].sort_values([\"ds\"], ascending = False)\n",
    "\n",
    "#indexNames = dfObj[ (dfObj['Age'] >= 30) & (dfObj['Age'] <= 40) ].index\n",
    "#dfObj.drop(indexNames , inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'A'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-86-9cba91c87689>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ds_3_days_ago'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ds'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDateOffset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf_final\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_final\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'left'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft_on\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'ds_3_days_ago'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright_on\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'ds'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'new_cases_last_3_days'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'B_x'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'B_y'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdf_final\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'B_x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'D_x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ds_x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ds_3_days_ago_x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'new_cases_last_3_days'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'neighborhood'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ds_x'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'ds'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'B_x'\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0;34m'current_cases'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'D_x'\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0;34m'cases_per_100k'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ds_3_days_ago_x'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'ds_3_days_ago'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36mmerge\u001b[0;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m     84\u001b[0m         \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m         \u001b[0mindicator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindicator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 86\u001b[0;31m         \u001b[0mvalidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     87\u001b[0m     )\n\u001b[1;32m     88\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, left, right, how, on, left_on, right_on, axis, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m    625\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mright_join_keys\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    626\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin_names\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 627\u001b[0;31m         ) = self._get_merge_keys()\n\u001b[0m\u001b[1;32m    628\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    629\u001b[0m         \u001b[0;31m# validate the merge keys dtypes. We may need to coerce\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m_get_merge_keys\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    981\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_rkey\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    982\u001b[0m                         \u001b[0;32mif\u001b[0m \u001b[0mrk\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 983\u001b[0;31m                             \u001b[0mright_keys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label_or_level_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    984\u001b[0m                         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    985\u001b[0m                             \u001b[0;31m# work-around for merge_asof(right_index=True)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_get_label_or_level_values\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1690\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_level_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1691\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1692\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1693\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1694\u001b[0m         \u001b[0;31m# Check for duplicates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'A'"
     ]
    }
   ],
   "source": [
    "df_final['ds_3_days_ago'] = df_final['ds'] + pd.DateOffset(days = -3)\n",
    "df_final=pd.merge(df_final, df_final, how='left', left_on=['A','ds_3_days_ago'], right_on=['A','ds'])\n",
    "df_final['new_cases_last_3_days'] = df_final['B_x'] - df_final['B_y']\n",
    "df_final = df_final[['A', 'B_x', 'D_x', 'ds_x', 'ds_3_days_ago_x', 'new_cases_last_3_days']]\n",
    "df_final.rename(columns={'A': 'neighborhood', 'ds_x':'ds', 'B_x' : 'current_cases', 'D_x' : 'cases_per_100k', 'ds_3_days_ago_x': 'ds_3_days_ago'}, inplace=True)\n",
    "print(df_final)\n",
    "df_final['ds'].max()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
